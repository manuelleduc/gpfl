/*
 * generated by Xtext 2.12.0
 */
package fr.mleduc.fsmwithmethods.serializer;

import com.google.inject.Inject;
import fr.mleduc.fsmwithmethods.fsmWithMethods.Event;
import fr.mleduc.fsmwithmethods.fsmWithMethods.FExpression;
import fr.mleduc.fsmwithmethods.fsmWithMethods.Fsm;
import fr.mleduc.fsmwithmethods.fsmWithMethods.FsmWithMethodsPackage;
import fr.mleduc.fsmwithmethods.fsmWithMethods.Method;
import fr.mleduc.fsmwithmethods.fsmWithMethods.MethodCall;
import fr.mleduc.fsmwithmethods.fsmWithMethods.State;
import fr.mleduc.fsmwithmethods.fsmWithMethods.Transition;
import fr.mleduc.fsmwithmethods.services.FsmWithMethodsGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FsmWithMethodsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FsmWithMethodsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FsmWithMethodsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FsmWithMethodsPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case FsmWithMethodsPackage.FEXPRESSION:
				sequence_Param(context, (FExpression) semanticObject); 
				return; 
			case FsmWithMethodsPackage.FSM:
				sequence_Fsm(context, (Fsm) semanticObject); 
				return; 
			case FsmWithMethodsPackage.METHOD:
				sequence_Method(context, (Method) semanticObject); 
				return; 
			case FsmWithMethodsPackage.METHOD_CALL:
				sequence_MethodCall(context, (MethodCall) semanticObject); 
				return; 
			case FsmWithMethodsPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case FsmWithMethodsPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     FExpression returns Event
	 *     Referentiable returns Event
	 *     Event returns Event
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FsmWithMethodsPackage.Literals.FEXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FsmWithMethodsPackage.Literals.FEXPRESSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Fsm returns Fsm
	 *
	 * Constraint:
	 *     (name=ID state=[State|ID] expressions+=FExpression*)
	 */
	protected void sequence_Fsm(ISerializationContext context, Fsm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FExpression returns MethodCall
	 *     MethodCall returns MethodCall
	 *
	 * Constraint:
	 *     (method=[Method|ID] (params+=Referentiable params+=Referentiable*)?)
	 */
	protected void sequence_MethodCall(ISerializationContext context, MethodCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FExpression returns Method
	 *     Method returns Method
	 *
	 * Constraint:
	 *     (name=ID (params+=Param params+=Param*)? expressions+=FExpression*)
	 */
	protected void sequence_Method(ISerializationContext context, Method semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Param returns FExpression
	 *     Referentiable returns FExpression
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Param(ISerializationContext context, FExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FsmWithMethodsPackage.Literals.FEXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FsmWithMethodsPackage.Literals.FEXPRESSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FExpression returns State
	 *     Referentiable returns State
	 *     State returns State
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FsmWithMethodsPackage.Literals.FEXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FsmWithMethodsPackage.Literals.FEXPRESSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FExpression returns Transition
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (event=[FExpression|ID] from=[FExpression|ID] to=[FExpression|ID])
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FsmWithMethodsPackage.Literals.TRANSITION__EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FsmWithMethodsPackage.Literals.TRANSITION__EVENT));
			if (transientValues.isValueTransient(semanticObject, FsmWithMethodsPackage.Literals.TRANSITION__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FsmWithMethodsPackage.Literals.TRANSITION__FROM));
			if (transientValues.isValueTransient(semanticObject, FsmWithMethodsPackage.Literals.TRANSITION__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FsmWithMethodsPackage.Literals.TRANSITION__TO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionAccess().getEventFExpressionIDTerminalRuleCall_2_0_1(), semanticObject.eGet(FsmWithMethodsPackage.Literals.TRANSITION__EVENT, false));
		feeder.accept(grammarAccess.getTransitionAccess().getFromFExpressionIDTerminalRuleCall_4_0_1(), semanticObject.eGet(FsmWithMethodsPackage.Literals.TRANSITION__FROM, false));
		feeder.accept(grammarAccess.getTransitionAccess().getToFExpressionIDTerminalRuleCall_6_0_1(), semanticObject.eGet(FsmWithMethodsPackage.Literals.TRANSITION__TO, false));
		feeder.finish();
	}
	
	
}
