/*
 * generated by Xtext 2.12.0
 */
package fr.mleduc.fsmwithmethods.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FsmWithMethodsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FsmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.fsmwithmethods.FsmWithMethods.Fsm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFsmAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFsmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cInitKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cStateStateCrossReference_5_0 = (CrossReference)cStateAssignment_5.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_5_0_1 = (RuleCall)cStateStateCrossReference_5_0.eContents().get(1);
		private final Assignment cExpressionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionsFExpressionParserRuleCall_6_0 = (RuleCall)cExpressionsAssignment_6.eContents().get(0);
		
		//Fsm:
		//	{Fsm} 'fsm' name=ID 'init' '=' state=[State] expressions+=FExpression*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Fsm} 'fsm' name=ID 'init' '=' state=[State] expressions+=FExpression*
		public Group getGroup() { return cGroup; }
		
		//{Fsm}
		public Action getFsmAction_0() { return cFsmAction_0; }
		
		//'fsm'
		public Keyword getFsmKeyword_1() { return cFsmKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'init'
		public Keyword getInitKeyword_3() { return cInitKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//state=[State]
		public Assignment getStateAssignment_5() { return cStateAssignment_5; }
		
		//[State]
		public CrossReference getStateStateCrossReference_5_0() { return cStateStateCrossReference_5_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_5_0_1() { return cStateStateIDTerminalRuleCall_5_0_1; }
		
		//expressions+=FExpression*
		public Assignment getExpressionsAssignment_6() { return cExpressionsAssignment_6; }
		
		//FExpression
		public RuleCall getExpressionsFExpressionParserRuleCall_6_0() { return cExpressionsFExpressionParserRuleCall_6_0; }
	}
	public class FExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.fsmwithmethods.FsmWithMethods.FExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEventParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//FExpression:
		//	Method | Transition | MethodCall | State | Event;
		@Override public ParserRule getRule() { return rule; }
		
		//Method | Transition | MethodCall | State | Event
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Method
		public RuleCall getMethodParserRuleCall_0() { return cMethodParserRuleCall_0; }
		
		//Transition
		public RuleCall getTransitionParserRuleCall_1() { return cTransitionParserRuleCall_1; }
		
		//MethodCall
		public RuleCall getMethodCallParserRuleCall_2() { return cMethodCallParserRuleCall_2; }
		
		//State
		public RuleCall getStateParserRuleCall_3() { return cStateParserRuleCall_3; }
		
		//Event
		public RuleCall getEventParserRuleCall_4() { return cEventParserRuleCall_4; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.fsmwithmethods.FsmWithMethods.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExpressionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExpressionsFExpressionParserRuleCall_7_0 = (RuleCall)cExpressionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Method FExpression:
		//	{Method} 'def' name=ID '(' (params+=Param (',' params+=Param)*)? ')' '{'
		//	expressions+=FExpression*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Method} 'def' name=ID '(' (params+=Param (',' params+=Param)*)? ')' '{' expressions+=FExpression* '}'
		public Group getGroup() { return cGroup; }
		
		//{Method}
		public Action getMethodAction_0() { return cMethodAction_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=Param (',' params+=Param)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=Param
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_4_0_0() { return cParamsParamParserRuleCall_4_0_0; }
		
		//(',' params+=Param)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=Param
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_4_1_1_0() { return cParamsParamParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//expressions+=FExpression*
		public Assignment getExpressionsAssignment_7() { return cExpressionsAssignment_7; }
		
		//FExpression
		public RuleCall getExpressionsFExpressionParserRuleCall_7_0() { return cExpressionsFExpressionParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.fsmwithmethods.FsmWithMethods.Param");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Param FExpression:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.fsmwithmethods.FsmWithMethods.MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMethodMethodCrossReference_2_0 = (CrossReference)cMethodAssignment_2.eContents().get(0);
		private final RuleCall cMethodMethodIDTerminalRuleCall_2_0_1 = (RuleCall)cMethodMethodCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsReferentiableParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsReferentiableParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MethodCall FExpression:
		//	{MethodCall} 'call' method=[Method] '(' (params+=Referentiable (',' params+=Referentiable)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{MethodCall} 'call' method=[Method] '(' (params+=Referentiable (',' params+=Referentiable)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{MethodCall}
		public Action getMethodCallAction_0() { return cMethodCallAction_0; }
		
		//'call'
		public Keyword getCallKeyword_1() { return cCallKeyword_1; }
		
		//method=[Method]
		public Assignment getMethodAssignment_2() { return cMethodAssignment_2; }
		
		//[Method]
		public CrossReference getMethodMethodCrossReference_2_0() { return cMethodMethodCrossReference_2_0; }
		
		//ID
		public RuleCall getMethodMethodIDTerminalRuleCall_2_0_1() { return cMethodMethodIDTerminalRuleCall_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=Referentiable (',' params+=Referentiable)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=Referentiable
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//Referentiable
		public RuleCall getParamsReferentiableParserRuleCall_4_0_0() { return cParamsReferentiableParserRuleCall_4_0_0; }
		
		//(',' params+=Referentiable)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=Referentiable
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//Referentiable
		public RuleCall getParamsReferentiableParserRuleCall_4_1_1_0() { return cParamsReferentiableParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ReferentiableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.fsmwithmethods.FsmWithMethods.Referentiable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParamParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Referentiable:
		//	State | Event | Param;
		@Override public ParserRule getRule() { return rule; }
		
		//State | Event | Param
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }
		
		//Event
		public RuleCall getEventParserRuleCall_1() { return cEventParserRuleCall_1; }
		
		//Param
		public RuleCall getParamParserRuleCall_2() { return cParamParserRuleCall_2; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.fsmwithmethods.FsmWithMethods.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//State FExpression:
		//	{State} 'state' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{State} 'state' name=ID
		public Group getGroup() { return cGroup; }
		
		//{State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.fsmwithmethods.FsmWithMethods.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTransitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEventFExpressionCrossReference_2_0 = (CrossReference)cEventAssignment_2.eContents().get(0);
		private final RuleCall cEventFExpressionIDTerminalRuleCall_2_0_1 = (RuleCall)cEventFExpressionCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFromAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFromFExpressionCrossReference_4_0 = (CrossReference)cFromAssignment_4.eContents().get(0);
		private final RuleCall cFromFExpressionIDTerminalRuleCall_4_0_1 = (RuleCall)cFromFExpressionCrossReference_4_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cToFExpressionCrossReference_6_0 = (CrossReference)cToAssignment_6.eContents().get(0);
		private final RuleCall cToFExpressionIDTerminalRuleCall_6_0_1 = (RuleCall)cToFExpressionCrossReference_6_0.eContents().get(1);
		
		//Transition FExpression:
		//	{Transition} 'transition' event=[FExpression] ':' from=[FExpression] '->' to=[FExpression];
		@Override public ParserRule getRule() { return rule; }
		
		//{Transition} 'transition' event=[FExpression] ':' from=[FExpression] '->' to=[FExpression]
		public Group getGroup() { return cGroup; }
		
		//{Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//'transition'
		public Keyword getTransitionKeyword_1() { return cTransitionKeyword_1; }
		
		//event=[FExpression]
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }
		
		//[FExpression]
		public CrossReference getEventFExpressionCrossReference_2_0() { return cEventFExpressionCrossReference_2_0; }
		
		//ID
		public RuleCall getEventFExpressionIDTerminalRuleCall_2_0_1() { return cEventFExpressionIDTerminalRuleCall_2_0_1; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//from=[FExpression]
		public Assignment getFromAssignment_4() { return cFromAssignment_4; }
		
		//[FExpression]
		public CrossReference getFromFExpressionCrossReference_4_0() { return cFromFExpressionCrossReference_4_0; }
		
		//ID
		public RuleCall getFromFExpressionIDTerminalRuleCall_4_0_1() { return cFromFExpressionIDTerminalRuleCall_4_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//to=[FExpression]
		public Assignment getToAssignment_6() { return cToAssignment_6; }
		
		//[FExpression]
		public CrossReference getToFExpressionCrossReference_6_0() { return cToFExpressionCrossReference_6_0; }
		
		//ID
		public RuleCall getToFExpressionIDTerminalRuleCall_6_0_1() { return cToFExpressionIDTerminalRuleCall_6_0_1; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.fsmwithmethods.FsmWithMethods.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Event FExpression:
		//	{Event} 'event' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Event} 'event' name=ID
		public Group getGroup() { return cGroup; }
		
		//{Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//'event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	
	
	private final FsmElements pFsm;
	private final FExpressionElements pFExpression;
	private final MethodElements pMethod;
	private final ParamElements pParam;
	private final MethodCallElements pMethodCall;
	private final ReferentiableElements pReferentiable;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final EventElements pEvent;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FsmWithMethodsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFsm = new FsmElements();
		this.pFExpression = new FExpressionElements();
		this.pMethod = new MethodElements();
		this.pParam = new ParamElements();
		this.pMethodCall = new MethodCallElements();
		this.pReferentiable = new ReferentiableElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pEvent = new EventElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.mleduc.fsmwithmethods.FsmWithMethods".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Fsm:
	//	{Fsm} 'fsm' name=ID 'init' '=' state=[State] expressions+=FExpression*;
	public FsmElements getFsmAccess() {
		return pFsm;
	}
	
	public ParserRule getFsmRule() {
		return getFsmAccess().getRule();
	}
	
	//FExpression:
	//	Method | Transition | MethodCall | State | Event;
	public FExpressionElements getFExpressionAccess() {
		return pFExpression;
	}
	
	public ParserRule getFExpressionRule() {
		return getFExpressionAccess().getRule();
	}
	
	//Method FExpression:
	//	{Method} 'def' name=ID '(' (params+=Param (',' params+=Param)*)? ')' '{'
	//	expressions+=FExpression*
	//	'}';
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Param FExpression:
	//	name=ID;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//MethodCall FExpression:
	//	{MethodCall} 'call' method=[Method] '(' (params+=Referentiable (',' params+=Referentiable)*)? ')';
	public MethodCallElements getMethodCallAccess() {
		return pMethodCall;
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}
	
	//Referentiable:
	//	State | Event | Param;
	public ReferentiableElements getReferentiableAccess() {
		return pReferentiable;
	}
	
	public ParserRule getReferentiableRule() {
		return getReferentiableAccess().getRule();
	}
	
	//State FExpression:
	//	{State} 'state' name=ID;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition FExpression:
	//	{Transition} 'transition' event=[FExpression] ':' from=[FExpression] '->' to=[FExpression];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Event FExpression:
	//	{Event} 'event' name=ID;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
