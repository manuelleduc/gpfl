/**
 * generated by Xtext 2.12.0
 */
package fr.mleduc.fsmwithmethods.fsmWithMethods.impl;

import fr.mleduc.fsmwithmethods.fsmWithMethods.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FsmWithMethodsFactoryImpl extends EFactoryImpl implements FsmWithMethodsFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static FsmWithMethodsFactory init()
  {
    try
    {
      FsmWithMethodsFactory theFsmWithMethodsFactory = (FsmWithMethodsFactory)EPackage.Registry.INSTANCE.getEFactory(FsmWithMethodsPackage.eNS_URI);
      if (theFsmWithMethodsFactory != null)
      {
        return theFsmWithMethodsFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new FsmWithMethodsFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FsmWithMethodsFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case FsmWithMethodsPackage.FSM: return createFsm();
      case FsmWithMethodsPackage.FEXPRESSION: return createFExpression();
      case FsmWithMethodsPackage.REFERENTIABLE: return createReferentiable();
      case FsmWithMethodsPackage.METHOD: return createMethod();
      case FsmWithMethodsPackage.METHOD_CALL: return createMethodCall();
      case FsmWithMethodsPackage.STATE: return createState();
      case FsmWithMethodsPackage.TRANSITION: return createTransition();
      case FsmWithMethodsPackage.EVENT: return createEvent();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fsm createFsm()
  {
    FsmImpl fsm = new FsmImpl();
    return fsm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FExpression createFExpression()
  {
    FExpressionImpl fExpression = new FExpressionImpl();
    return fExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Referentiable createReferentiable()
  {
    ReferentiableImpl referentiable = new ReferentiableImpl();
    return referentiable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Method createMethod()
  {
    MethodImpl method = new MethodImpl();
    return method;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MethodCall createMethodCall()
  {
    MethodCallImpl methodCall = new MethodCallImpl();
    return methodCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public State createState()
  {
    StateImpl state = new StateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Transition createTransition()
  {
    TransitionImpl transition = new TransitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FsmWithMethodsPackage getFsmWithMethodsPackage()
  {
    return (FsmWithMethodsPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static FsmWithMethodsPackage getPackage()
  {
    return FsmWithMethodsPackage.eINSTANCE;
  }

} //FsmWithMethodsFactoryImpl
