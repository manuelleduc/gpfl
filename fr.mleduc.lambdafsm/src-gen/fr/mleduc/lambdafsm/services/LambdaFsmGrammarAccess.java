/*
 * generated by Xtext 2.12.0
 */
package fr.mleduc.lambdafsm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.mleduc.fsm.services.FsmGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LambdaFsmGrammarAccess extends AbstractGrammarElementFinder {
	
	public class LambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.lambdafsm.LambdaFsm.Lambda");
		private final RuleCall cFsmParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Lambda fsm::Fsm:
		//	Fsm::Fsm // root	
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Fsm::Fsm
		public RuleCall getFsmParserRuleCall() { return cFsmParserRuleCall; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.lambdafsm.LambdaFsm.State");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMethodDefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cDefKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Assignment cParamsAssignment_0_4_0 = (Assignment)cGroup_0_4.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_0_4_0_0 = (RuleCall)cParamsAssignment_0_4_0.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cGroup_0_4.eContents().get(1);
		private final Keyword cCommaKeyword_0_4_1_0 = (Keyword)cGroup_0_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_0_4_1_1 = (Assignment)cGroup_0_4_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_0_4_1_1_0 = (RuleCall)cParamsAssignment_0_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cStmtsAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cStmtsStateParserRuleCall_0_7_0 = (RuleCall)cStmtsAssignment_0_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final RuleCall cStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMethodCallAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCallKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMethodAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cMethodMethodDefCrossReference_2_2_0 = (CrossReference)cMethodAssignment_2_2.eContents().get(0);
		private final RuleCall cMethodMethodDefIDTerminalRuleCall_2_2_0_1 = (RuleCall)cMethodMethodDefCrossReference_2_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Assignment cParamsAssignment_2_4_0 = (Assignment)cGroup_2_4.eContents().get(0);
		private final RuleCall cParamsStateParserRuleCall_2_4_0_0 = (RuleCall)cParamsAssignment_2_4_0.eContents().get(0);
		private final Group cGroup_2_4_1 = (Group)cGroup_2_4.eContents().get(1);
		private final Keyword cCommaKeyword_2_4_1_0 = (Keyword)cGroup_2_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_4_1_1 = (Assignment)cGroup_2_4_1.eContents().get(1);
		private final RuleCall cParamsStateParserRuleCall_2_4_1_1_0 = (RuleCall)cParamsAssignment_2_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//@ Override State fsm::State:
		//	{MethodDef} 'def' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' '{'
		//	stmts+=State*
		//	'}' | super | {MethodCall} 'call' method=[MethodDef] '(' (params+=State (',' params+=State)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{MethodDef} 'def' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' '{' stmts+=State* '}' | super |
		//{MethodCall} 'call' method=[MethodDef] '(' (params+=State (',' params+=State)*)? ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{MethodDef} 'def' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' '{' stmts+=State* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//{MethodDef}
		public Action getMethodDefAction_0_0() { return cMethodDefAction_0_0; }
		
		//'def'
		public Keyword getDefKeyword_0_1() { return cDefKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3() { return cLeftParenthesisKeyword_0_3; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_0_4_0() { return cParamsAssignment_0_4_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_0_4_0_0() { return cParamsParameterParserRuleCall_0_4_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }
		
		//','
		public Keyword getCommaKeyword_0_4_1_0() { return cCommaKeyword_0_4_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_0_4_1_1() { return cParamsAssignment_0_4_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_0_4_1_1_0() { return cParamsParameterParserRuleCall_0_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_6() { return cLeftCurlyBracketKeyword_0_6; }
		
		//stmts+=State*
		public Assignment getStmtsAssignment_0_7() { return cStmtsAssignment_0_7; }
		
		//State
		public RuleCall getStmtsStateParserRuleCall_0_7_0() { return cStmtsStateParserRuleCall_0_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_8() { return cRightCurlyBracketKeyword_0_8; }
		
		//super
		public RuleCall getStateParserRuleCall_1() { return cStateParserRuleCall_1; }
		
		//{MethodCall} 'call' method=[MethodDef] '(' (params+=State (',' params+=State)*)? ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{MethodCall}
		public Action getMethodCallAction_2_0() { return cMethodCallAction_2_0; }
		
		//'call'
		public Keyword getCallKeyword_2_1() { return cCallKeyword_2_1; }
		
		//method=[MethodDef]
		public Assignment getMethodAssignment_2_2() { return cMethodAssignment_2_2; }
		
		//[MethodDef]
		public CrossReference getMethodMethodDefCrossReference_2_2_0() { return cMethodMethodDefCrossReference_2_2_0; }
		
		//ID
		public RuleCall getMethodMethodDefIDTerminalRuleCall_2_2_0_1() { return cMethodMethodDefIDTerminalRuleCall_2_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_3() { return cLeftParenthesisKeyword_2_3; }
		
		//(params+=State (',' params+=State)*)?
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//params+=State
		public Assignment getParamsAssignment_2_4_0() { return cParamsAssignment_2_4_0; }
		
		//State
		public RuleCall getParamsStateParserRuleCall_2_4_0_0() { return cParamsStateParserRuleCall_2_4_0_0; }
		
		//(',' params+=State)*
		public Group getGroup_2_4_1() { return cGroup_2_4_1; }
		
		//','
		public Keyword getCommaKeyword_2_4_1_0() { return cCommaKeyword_2_4_1_0; }
		
		//params+=State
		public Assignment getParamsAssignment_2_4_1_1() { return cParamsAssignment_2_4_1_1; }
		
		//State
		public RuleCall getParamsStateParserRuleCall_2_4_1_1_0() { return cParamsStateParserRuleCall_2_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.lambdafsm.LambdaFsm.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	{Parameter} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter} name=ID
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final LambdaElements pLambda;
	private final StateElements pState;
	private final ParameterElements pParameter;
	
	private final Grammar grammar;
	
	private final FsmGrammarAccess gaFsm;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LambdaFsmGrammarAccess(GrammarProvider grammarProvider,
			FsmGrammarAccess gaFsm,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaFsm = gaFsm;
		this.gaTerminals = gaTerminals;
		this.pLambda = new LambdaElements();
		this.pState = new StateElements();
		this.pParameter = new ParameterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.mleduc.lambdafsm.LambdaFsm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public FsmGrammarAccess getFsmGrammarAccess() {
		return gaFsm;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Lambda fsm::Fsm:
	//	Fsm::Fsm // root	
	//;
	public LambdaElements getLambdaAccess() {
		return pLambda;
	}
	
	public ParserRule getLambdaRule() {
		return getLambdaAccess().getRule();
	}
	
	//@ Override State fsm::State:
	//	{MethodDef} 'def' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' '{'
	//	stmts+=State*
	//	'}' | super | {MethodCall} 'call' method=[MethodDef] '(' (params+=State (',' params+=State)*)? ')';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Parameter:
	//	{Parameter} name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Fsm:
	//	'fsm' name=ID 'init' '=' state=[State] states+=super::State*;
	public FsmGrammarAccess.FsmElements getFsmAccess() {
		return gaFsm.getFsmAccess();
	}
	
	public ParserRule getFsmRule() {
		return getFsmAccess().getRule();
	}
	
	//State:
	//	name=ID ('-' transitions+=Transition)*;
	public FsmGrammarAccess.StateElements getFsmStateAccess() {
		return gaFsm.getStateAccess();
	}
	
	public ParserRule getFsmStateRule() {
		return getFsmStateAccess().getRule();
	}
	
	//Transition:
	//	name=ID '=>' state=[State];
	public FsmGrammarAccess.TransitionElements getTransitionAccess() {
		return gaFsm.getTransitionAccess();
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
