/*
 * generated by Xtext 2.12.0
 */
package fr.mleduc.lambda.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.mleduc.gpfl.services.GpflGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LambdaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class LambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.lambda.Lambda.Lambda");
		private final RuleCall cProgramParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Lambda gpfl::Program:
		//	Gpfl::Program;
		@Override public ParserRule getRule() { return rule; }
		
		//Gpfl::Program
		public RuleCall getProgramParserRuleCall() { return cProgramParserRuleCall; }
	}
	public class GExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.lambda.Lambda.GExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMethodDefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cDefKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Assignment cParamsAssignment_0_4_0 = (Assignment)cGroup_0_4.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_0_4_0_0 = (RuleCall)cParamsAssignment_0_4_0.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cGroup_0_4.eContents().get(1);
		private final Keyword cCommaKeyword_0_4_1_0 = (Keyword)cGroup_0_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_0_4_1_1 = (Assignment)cGroup_0_4_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_0_4_1_1_0 = (RuleCall)cParamsAssignment_0_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cStmtsAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cStmtsGExpressionParserRuleCall_0_7_0 = (RuleCall)cStmtsAssignment_0_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final RuleCall cGExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMethodCallAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCallKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMethodAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cMethodMethodDefCrossReference_2_2_0 = (CrossReference)cMethodAssignment_2_2.eContents().get(0);
		private final RuleCall cMethodMethodDefIDTerminalRuleCall_2_2_0_1 = (RuleCall)cMethodMethodDefCrossReference_2_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Assignment cParamsAssignment_2_4_0 = (Assignment)cGroup_2_4.eContents().get(0);
		private final RuleCall cParamsGExpressionParserRuleCall_2_4_0_0 = (RuleCall)cParamsAssignment_2_4_0.eContents().get(0);
		private final Group cGroup_2_4_1 = (Group)cGroup_2_4.eContents().get(1);
		private final Keyword cCommaKeyword_2_4_1_0 = (Keyword)cGroup_2_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_4_1_1 = (Assignment)cGroup_2_4_1.eContents().get(1);
		private final RuleCall cParamsGExpressionParserRuleCall_2_4_1_1_0 = (RuleCall)cParamsAssignment_2_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//@ Override GExpression gpfl::GExpression:
		//	{MethodDef} 'def' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' '{'
		//	stmts+=GExpression*
		//	'}' | Gpfl::GExpression | {MethodCall} 'call' method=[MethodDef] '(' (params+=GExpression (',' params+=GExpression)*)?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{MethodDef} 'def' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' '{' stmts+=GExpression* '}' |
		//Gpfl::GExpression | {MethodCall} 'call' method=[MethodDef] '(' (params+=GExpression (',' params+=GExpression)*)? ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{MethodDef} 'def' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' '{' stmts+=GExpression* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//{MethodDef}
		public Action getMethodDefAction_0_0() { return cMethodDefAction_0_0; }
		
		//'def'
		public Keyword getDefKeyword_0_1() { return cDefKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3() { return cLeftParenthesisKeyword_0_3; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_0_4_0() { return cParamsAssignment_0_4_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_0_4_0_0() { return cParamsParameterParserRuleCall_0_4_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }
		
		//','
		public Keyword getCommaKeyword_0_4_1_0() { return cCommaKeyword_0_4_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_0_4_1_1() { return cParamsAssignment_0_4_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_0_4_1_1_0() { return cParamsParameterParserRuleCall_0_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_6() { return cLeftCurlyBracketKeyword_0_6; }
		
		//stmts+=GExpression*
		public Assignment getStmtsAssignment_0_7() { return cStmtsAssignment_0_7; }
		
		//GExpression
		public RuleCall getStmtsGExpressionParserRuleCall_0_7_0() { return cStmtsGExpressionParserRuleCall_0_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_8() { return cRightCurlyBracketKeyword_0_8; }
		
		//Gpfl::GExpression
		public RuleCall getGExpressionParserRuleCall_1() { return cGExpressionParserRuleCall_1; }
		
		//{MethodCall} 'call' method=[MethodDef] '(' (params+=GExpression (',' params+=GExpression)*)? ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{MethodCall}
		public Action getMethodCallAction_2_0() { return cMethodCallAction_2_0; }
		
		//'call'
		public Keyword getCallKeyword_2_1() { return cCallKeyword_2_1; }
		
		//method=[MethodDef]
		public Assignment getMethodAssignment_2_2() { return cMethodAssignment_2_2; }
		
		//[MethodDef]
		public CrossReference getMethodMethodDefCrossReference_2_2_0() { return cMethodMethodDefCrossReference_2_2_0; }
		
		//ID
		public RuleCall getMethodMethodDefIDTerminalRuleCall_2_2_0_1() { return cMethodMethodDefIDTerminalRuleCall_2_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_3() { return cLeftParenthesisKeyword_2_3; }
		
		//(params+=GExpression (',' params+=GExpression)*)?
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//params+=GExpression
		public Assignment getParamsAssignment_2_4_0() { return cParamsAssignment_2_4_0; }
		
		//GExpression
		public RuleCall getParamsGExpressionParserRuleCall_2_4_0_0() { return cParamsGExpressionParserRuleCall_2_4_0_0; }
		
		//(',' params+=GExpression)*
		public Group getGroup_2_4_1() { return cGroup_2_4_1; }
		
		//','
		public Keyword getCommaKeyword_2_4_1_0() { return cCommaKeyword_2_4_1_0; }
		
		//params+=GExpression
		public Assignment getParamsAssignment_2_4_1_1() { return cParamsAssignment_2_4_1_1; }
		
		//GExpression
		public RuleCall getParamsGExpressionParserRuleCall_2_4_1_1_0() { return cParamsGExpressionParserRuleCall_2_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.lambda.Lambda.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	{Parameter} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter} name=ID
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final LambdaElements pLambda;
	private final GExpressionElements pGExpression;
	private final ParameterElements pParameter;
	
	private final Grammar grammar;
	
	private final GpflGrammarAccess gaGpfl;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LambdaGrammarAccess(GrammarProvider grammarProvider,
			GpflGrammarAccess gaGpfl,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaGpfl = gaGpfl;
		this.gaTerminals = gaTerminals;
		this.pLambda = new LambdaElements();
		this.pGExpression = new GExpressionElements();
		this.pParameter = new ParameterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.mleduc.lambda.Lambda".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public GpflGrammarAccess getGpflGrammarAccess() {
		return gaGpfl;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Lambda gpfl::Program:
	//	Gpfl::Program;
	public LambdaElements getLambdaAccess() {
		return pLambda;
	}
	
	public ParserRule getLambdaRule() {
		return getLambdaAccess().getRule();
	}
	
	//@ Override GExpression gpfl::GExpression:
	//	{MethodDef} 'def' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' '{'
	//	stmts+=GExpression*
	//	'}' | Gpfl::GExpression | {MethodCall} 'call' method=[MethodDef] '(' (params+=GExpression (',' params+=GExpression)*)?
	//	')';
	public GExpressionElements getGExpressionAccess() {
		return pGExpression;
	}
	
	public ParserRule getGExpressionRule() {
		return getGExpressionAccess().getRule();
	}
	
	//Parameter:
	//	{Parameter} name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	////import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
	//Program:
	//	{Program}
	//	'package' name=ID
	//	"PROLOGUE" ("AUTOMATAS" automatas+=AutomataDef*)? ("INIT" initStmts+=super::GExpression*)?
	//	"FILTER"
	//	stmts+=super::GExpression*;
	public GpflGrammarAccess.ProgramElements getProgramAccess() {
		return gaGpfl.getProgramAccess();
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//GExpression:
	//	Cmd | {CondStmt} "cond" "(" exp=super "," stmts+=super* ")" | {IterStmt} "iter" "(" exp=super "," stmts+=super* ")" |
	//	{InterruptStmt} "newInterrupt" "(" timeout=INT "," periodic=super "," stmts+=super* ")";
	public GpflGrammarAccess.GExpressionElements getGpflGExpressionAccess() {
		return gaGpfl.getGExpressionAccess();
	}
	
	public ParserRule getGpflGExpressionRule() {
		return getGpflGExpressionAccess().getRule();
	}
	
	//Cmd GExpression:
	//	{NopCmd} "nop" | {AcceptCmd} "accept" | {DropCmd} "drop" | {SendCmd} "send" "(" port=Port "," fields+=Field* ")" |
	//	{AlarmCmd} "alarm" "(" exp=super::GExpression ")" | {SetCmd} "set" "(" name=ID "," exp=CmdExpr ")" | {AutomatonCmd}
	//	"newAutomaton" "(" name=ID "," automaton=[AutomataDef] ")" | {StpCmd} "step" "(" automaton=[AutomatonCmd] ","
	//	event=super::GExpression "," errors+=super::GExpression* ")" | CmdExpr;
	public GpflGrammarAccess.CmdElements getCmdAccess() {
		return gaGpfl.getCmdAccess();
	}
	
	public ParserRule getCmdRule() {
		return getCmdAccess().getRule();
	}
	
	//CmdExpr GExpression:
	//	CmdOr;
	public GpflGrammarAccess.CmdExprElements getCmdExprAccess() {
		return gaGpfl.getCmdExprAccess();
	}
	
	public ParserRule getCmdExprRule() {
		return getCmdExprAccess().getRule();
	}
	
	//CmdOr GExpression:
	//	CmdAnd (=> ({CmdAnd.left=current} '||') right=CmdAnd)*;
	public GpflGrammarAccess.CmdOrElements getCmdOrAccess() {
		return gaGpfl.getCmdOrAccess();
	}
	
	public ParserRule getCmdOrRule() {
		return getCmdOrAccess().getRule();
	}
	
	//CmdAnd GExpression:
	//	CmdEq (=> ({CmdAnd.left=current} '&&') right=CmdEq)*;
	public GpflGrammarAccess.CmdAndElements getCmdAndAccess() {
		return gaGpfl.getCmdAndAccess();
	}
	
	public ParserRule getCmdAndRule() {
		return getCmdAndAccess().getRule();
	}
	
	//CmdEq GExpression:
	//	CmdNeq (=> ({CmdEq.left=current} '==') right=CmdNeq)*;
	public GpflGrammarAccess.CmdEqElements getCmdEqAccess() {
		return gaGpfl.getCmdEqAccess();
	}
	
	public ParserRule getCmdEqRule() {
		return getCmdEqAccess().getRule();
	}
	
	//CmdNeq GExpression:
	//	CmdGECompare (=> ({CmdNEq.left=current} '!=') right=CmdGECompare)*;
	public GpflGrammarAccess.CmdNeqElements getCmdNeqAccess() {
		return gaGpfl.getCmdNeqAccess();
	}
	
	public ParserRule getCmdNeqRule() {
		return getCmdNeqAccess().getRule();
	}
	
	//CmdGECompare GExpression:
	//	CmdLECompare (=> ({CmdGECompare.left=current} '>=') right=CmdLECompare)*;
	public GpflGrammarAccess.CmdGECompareElements getCmdGECompareAccess() {
		return gaGpfl.getCmdGECompareAccess();
	}
	
	public ParserRule getCmdGECompareRule() {
		return getCmdGECompareAccess().getRule();
	}
	
	//CmdLECompare GExpression:
	//	CmdGCompare (=> ({CmdLECompare.left=current} '<' '=') right=CmdGCompare)*;
	public GpflGrammarAccess.CmdLECompareElements getCmdLECompareAccess() {
		return gaGpfl.getCmdLECompareAccess();
	}
	
	public ParserRule getCmdLECompareRule() {
		return getCmdLECompareAccess().getRule();
	}
	
	//CmdGCompare GExpression:
	//	CmdLCompare (=> ({CmdGCompare.left=current} '>') right=CmdLCompare)*;
	public GpflGrammarAccess.CmdGCompareElements getCmdGCompareAccess() {
		return gaGpfl.getCmdGCompareAccess();
	}
	
	public ParserRule getCmdGCompareRule() {
		return getCmdGCompareAccess().getRule();
	}
	
	//CmdLCompare GExpression:
	//	CmdAdd (=> ({CmdLCompare.left=current} '<') right=CmdAdd)*;
	public GpflGrammarAccess.CmdLCompareElements getCmdLCompareAccess() {
		return gaGpfl.getCmdLCompareAccess();
	}
	
	public ParserRule getCmdLCompareRule() {
		return getCmdLCompareAccess().getRule();
	}
	
	//CmdAdd GExpression:
	//	CmdSub (=> ({CmdAdd.left=current} '+') right=CmdSub)*;
	public GpflGrammarAccess.CmdAddElements getCmdAddAccess() {
		return gaGpfl.getCmdAddAccess();
	}
	
	public ParserRule getCmdAddRule() {
		return getCmdAddAccess().getRule();
	}
	
	//CmdSub GExpression:
	//	CmdNot (=> ({CmdSub.left=current} '-') right=CmdNot)*;
	public GpflGrammarAccess.CmdSubElements getCmdSubAccess() {
		return gaGpfl.getCmdSubAccess();
	}
	
	public ParserRule getCmdSubRule() {
		return getCmdSubAccess().getRule();
	}
	
	//CmdNot GExpression:
	//	'!' expression=CmdLit | CmdLit;
	public GpflGrammarAccess.CmdNotElements getCmdNotAccess() {
		return gaGpfl.getCmdNotAccess();
	}
	
	public ParserRule getCmdNotRule() {
		return getCmdNotAccess().getRule();
	}
	
	//CmdLit GExpression:
	//	{IntLitCmd} value=INT | {GBoolTrue} 'true' | {GBoolFalse} 'false' | {StringLit} value=STRING | {Variable} value=ID |
	//	{PortLit} (inSide?='inSide' | 'outSide') | '(' CmdExpr ')';
	public GpflGrammarAccess.CmdLitElements getCmdLitAccess() {
		return gaGpfl.getCmdLitAccess();
	}
	
	public ParserRule getCmdLitRule() {
		return getCmdLitAccess().getRule();
	}
	
	//Field:
	//	name=ID '->' value=super::GExpression;
	public GpflGrammarAccess.FieldElements getFieldAccess() {
		return gaGpfl.getFieldAccess();
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Port GExpression:
	//	{InPort} "inSide" | {OutPort} "outSide";
	public GpflGrammarAccess.PortElements getPortAccess() {
		return gaGpfl.getPortAccess();
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//AutomataDef:
	//	"AUTOMATA" name=ID "init" "=" init=[State] states+=State*;
	public GpflGrammarAccess.AutomataDefElements getAutomataDefAccess() {
		return gaGpfl.getAutomataDefAccess();
	}
	
	public ParserRule getAutomataDefRule() {
		return getAutomataDefAccess().getRule();
	}
	
	//State:
	//	name=ID transitions+=Transition*;
	public GpflGrammarAccess.StateElements getStateAccess() {
		return gaGpfl.getStateAccess();
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition: // automata events are primitives of the language
	//	'-' event=ID '->' target=[State];
	public GpflGrammarAccess.TransitionElements getTransitionAccess() {
		return gaGpfl.getTransitionAccess();
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
