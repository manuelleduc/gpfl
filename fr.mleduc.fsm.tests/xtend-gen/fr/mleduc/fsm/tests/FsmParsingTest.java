/**
 * generated by Xtext 2.12.0
 */
package fr.mleduc.fsm.tests;

import com.google.inject.Inject;
import fr.mleduc.fsm.fsm.Fsm;
import fr.mleduc.fsm.interpreter.IFsmInterpreter;
import fr.mleduc.fsm.tests.FsmInjectorProvider;
import java.util.Collections;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(FsmInjectorProvider.class)
@SuppressWarnings("all")
public class FsmParsingTest {
  @Inject
  @Extension
  private ParseHelper<Fsm> _parseHelper;
  
  @Inject
  @Extension
  private IFsmInterpreter _iFsmInterpreter;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("fsm test init = s0");
      _builder.newLine();
      _builder.append("s0");
      _builder.newLine();
      _builder.append("- a => s1");
      _builder.newLine();
      _builder.append("- b => s2 ");
      _builder.newLine();
      _builder.append("- c => s0");
      _builder.newLine();
      _builder.append("s1");
      _builder.newLine();
      _builder.append("- a => s0");
      _builder.newLine();
      _builder.append("- b => s1");
      _builder.newLine();
      _builder.append("- c => s1");
      _builder.newLine();
      _builder.append("s2");
      _builder.newLine();
      _builder.append("- a => s0");
      _builder.newLine();
      _builder.append("- b => s1 ");
      _builder.newLine();
      _builder.append("- c => s2");
      _builder.newLine();
      final Fsm result = this._parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testInterpreter() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("fsm test init = s0");
      _builder.newLine();
      _builder.append("s0");
      _builder.newLine();
      _builder.append("- c => s0");
      _builder.newLine();
      _builder.append("- a => s1");
      _builder.newLine();
      _builder.append("- b => s2 ");
      _builder.newLine();
      _builder.append("s1");
      _builder.newLine();
      _builder.append("- a => s0");
      _builder.newLine();
      _builder.append("- c => s1");
      _builder.newLine();
      _builder.append("- b => s2");
      _builder.newLine();
      _builder.append("s2");
      _builder.newLine();
      _builder.append("- a => s0");
      _builder.newLine();
      _builder.append("- b => s1 ");
      _builder.newLine();
      _builder.append("- c => s2");
      _builder.newLine();
      final Fsm result = this._parseHelper.parse(_builder);
      final List<String> ret = this._iFsmInterpreter.run(result, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("a", "b", "a")));
      Assert.assertEquals(Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("s0", "s1", "s2")), ret);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
