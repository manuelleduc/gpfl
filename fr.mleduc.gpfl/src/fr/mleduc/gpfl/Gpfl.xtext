grammar fr.mleduc.gpfl.Gpfl with org.eclipse.xtext.common.Terminals

generate gpfl "http://www.mleduc.fr/gpfl/Gpfl"
//import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
Program:
	{Program}
	'package' name=ID
	"PROLOGUE"
	("AUTOMATAS" automatas+=AutomataDef*)?
	("INIT" initStmts+=GExpression*)?
	"FILTER"
	stmts+=GExpression*;

GExpression returns GExpression:
	Cmd |
	{CondStmt} "cond" "(" exp=GExpression "," stmts+=GExpression* ")" |
	{IterStmt} "iter" "(" exp=GExpression "," stmts+=GExpression* ")" |
	{InterruptStmt} "newInterrupt" "(" timeout=INT "," periodic=GExpression "," stmts+=GExpression* ")";

Cmd returns GExpression:
	{NopCmd} "nop" |
	{AcceptCmd} "accept" |
	{DropCmd} "drop" |
	{SendCmd} "send" "(" port=Port "," fields+=Field* ")" |
	{AlarmCmd} "alarm" "(" exp=GExpression ")" |
	{SetCmd} "set" "(" name=ID "," exp=CmdExpr ")" |
	{AutomatonCmd} "newAutomaton" "(" name=ID "," automaton=[AutomataDef|ID] ")" |
	{StpCmd} "step" "(" automaton=[AutomatonCmd|ID] "," event=GExpression "," errors+=GExpression* ")" |
	CmdExpr;

CmdExpr returns GExpression:
	CmdOr;

CmdOr returns GExpression:
	CmdAnd (=> ({CmdAnd.left=current} '||') right=CmdAnd)*;

CmdAnd returns GExpression:
	CmdEq (=> ({CmdAnd.left=current} '&&') right=CmdEq)*;

CmdEq returns GExpression:
	CmdNeq (=> ({CmdEq.left=current} '==') right=CmdNeq)*;

CmdNeq returns GExpression:
	CmdGECompare (=> ({CmdNEq.left=current} '!=') right=CmdGECompare)*;

CmdGECompare returns GExpression:
	CmdLECompare (=> ({CmdGECompare.left=current} '>=') right=CmdLECompare)*;

CmdLECompare returns GExpression:
	CmdGCompare (=> ({CmdLECompare.left=current} '<' '=') right=CmdGCompare)*;

CmdGCompare returns GExpression:
	CmdLCompare (=> ({CmdGCompare.left=current} '>') right=CmdLCompare)*;

CmdLCompare returns GExpression:
	CmdAdd (=> ({CmdLCompare.left=current} '<') right=CmdAdd)*;

CmdAdd returns GExpression:
	CmdSub (=> ({CmdAdd.left=current} '+') right=CmdSub)*;

CmdSub returns GExpression:
	CmdNot (=> ({CmdSub.left=current} '-') right=CmdNot)*;

CmdNot returns GExpression:
	'!' expression=CmdLit | CmdLit;

CmdLit returns GExpression:
	{IntLitCmd} value=INT | {GBoolTrue} 'true' | {GBoolFalse} 'false' | {StringLit} value=STRING | 
	{Variable} value=ID |
	{PortLit} (inSide?='inSide' | 'outSide') | '(' CmdExpr ')';

Field:
	name=ID '->' value=GExpression;

Port returns GExpression:
// ports are privimites of the languages
	{InPort} "inSide" | {OutPort} "outSide";

AutomataDef:
	"AUTOMATA" name=ID "init" "=" init=[State|ID] states+=State*;

State:
	name=ID transitions+=Transition*;

Transition:
// automata events are primitives of the language
	'-' event=ID '->' target=[State|ID];