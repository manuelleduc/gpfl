/**
 * generated by Xtext 2.12.0
 */
package fr.mleduc.gpfl.gpfl.util;

import fr.mleduc.gpfl.gpfl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.mleduc.gpfl.gpfl.GpflPackage
 * @generated
 */
public class GpflAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GpflPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GpflAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = GpflPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GpflSwitch<Adapter> modelSwitch =
    new GpflSwitch<Adapter>()
    {
      @Override
      public Adapter caseProgram(Program object)
      {
        return createProgramAdapter();
      }
      @Override
      public Adapter caseGExpression(GExpression object)
      {
        return createGExpressionAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseAutomataDef(AutomataDef object)
      {
        return createAutomataDefAdapter();
      }
      @Override
      public Adapter caseState(State object)
      {
        return createStateAdapter();
      }
      @Override
      public Adapter caseTransition(Transition object)
      {
        return createTransitionAdapter();
      }
      @Override
      public Adapter caseCondStmt(CondStmt object)
      {
        return createCondStmtAdapter();
      }
      @Override
      public Adapter caseIterStmt(IterStmt object)
      {
        return createIterStmtAdapter();
      }
      @Override
      public Adapter caseInterruptStmt(InterruptStmt object)
      {
        return createInterruptStmtAdapter();
      }
      @Override
      public Adapter caseNopCmd(NopCmd object)
      {
        return createNopCmdAdapter();
      }
      @Override
      public Adapter caseAcceptCmd(AcceptCmd object)
      {
        return createAcceptCmdAdapter();
      }
      @Override
      public Adapter caseDropCmd(DropCmd object)
      {
        return createDropCmdAdapter();
      }
      @Override
      public Adapter caseSendCmd(SendCmd object)
      {
        return createSendCmdAdapter();
      }
      @Override
      public Adapter caseAlarmCmd(AlarmCmd object)
      {
        return createAlarmCmdAdapter();
      }
      @Override
      public Adapter caseSetCmd(SetCmd object)
      {
        return createSetCmdAdapter();
      }
      @Override
      public Adapter caseAutomatonCmd(AutomatonCmd object)
      {
        return createAutomatonCmdAdapter();
      }
      @Override
      public Adapter caseStpCmd(StpCmd object)
      {
        return createStpCmdAdapter();
      }
      @Override
      public Adapter caseCmdAnd(CmdAnd object)
      {
        return createCmdAndAdapter();
      }
      @Override
      public Adapter caseCmdEq(CmdEq object)
      {
        return createCmdEqAdapter();
      }
      @Override
      public Adapter caseCmdNEq(CmdNEq object)
      {
        return createCmdNEqAdapter();
      }
      @Override
      public Adapter caseCmdGECompare(CmdGECompare object)
      {
        return createCmdGECompareAdapter();
      }
      @Override
      public Adapter caseCmdLECompare(CmdLECompare object)
      {
        return createCmdLECompareAdapter();
      }
      @Override
      public Adapter caseCmdGCompare(CmdGCompare object)
      {
        return createCmdGCompareAdapter();
      }
      @Override
      public Adapter caseCmdLCompare(CmdLCompare object)
      {
        return createCmdLCompareAdapter();
      }
      @Override
      public Adapter caseCmdAdd(CmdAdd object)
      {
        return createCmdAddAdapter();
      }
      @Override
      public Adapter caseCmdSub(CmdSub object)
      {
        return createCmdSubAdapter();
      }
      @Override
      public Adapter caseIntLitCmd(IntLitCmd object)
      {
        return createIntLitCmdAdapter();
      }
      @Override
      public Adapter caseGBoolTrue(GBoolTrue object)
      {
        return createGBoolTrueAdapter();
      }
      @Override
      public Adapter caseGBoolFalse(GBoolFalse object)
      {
        return createGBoolFalseAdapter();
      }
      @Override
      public Adapter caseStringLit(StringLit object)
      {
        return createStringLitAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter casePortLit(PortLit object)
      {
        return createPortLitAdapter();
      }
      @Override
      public Adapter caseInPort(InPort object)
      {
        return createInPortAdapter();
      }
      @Override
      public Adapter caseOutPort(OutPort object)
      {
        return createOutPortAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.Program <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.Program
   * @generated
   */
  public Adapter createProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.GExpression <em>GExpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.GExpression
   * @generated
   */
  public Adapter createGExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.AutomataDef <em>Automata Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.AutomataDef
   * @generated
   */
  public Adapter createAutomataDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.State <em>State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.State
   * @generated
   */
  public Adapter createStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.Transition <em>Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.Transition
   * @generated
   */
  public Adapter createTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.CondStmt <em>Cond Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.CondStmt
   * @generated
   */
  public Adapter createCondStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.IterStmt <em>Iter Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.IterStmt
   * @generated
   */
  public Adapter createIterStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.InterruptStmt <em>Interrupt Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.InterruptStmt
   * @generated
   */
  public Adapter createInterruptStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.NopCmd <em>Nop Cmd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.NopCmd
   * @generated
   */
  public Adapter createNopCmdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.AcceptCmd <em>Accept Cmd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.AcceptCmd
   * @generated
   */
  public Adapter createAcceptCmdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.DropCmd <em>Drop Cmd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.DropCmd
   * @generated
   */
  public Adapter createDropCmdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.SendCmd <em>Send Cmd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.SendCmd
   * @generated
   */
  public Adapter createSendCmdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.AlarmCmd <em>Alarm Cmd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.AlarmCmd
   * @generated
   */
  public Adapter createAlarmCmdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.SetCmd <em>Set Cmd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.SetCmd
   * @generated
   */
  public Adapter createSetCmdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.AutomatonCmd <em>Automaton Cmd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.AutomatonCmd
   * @generated
   */
  public Adapter createAutomatonCmdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.StpCmd <em>Stp Cmd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.StpCmd
   * @generated
   */
  public Adapter createStpCmdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.CmdAnd <em>Cmd And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.CmdAnd
   * @generated
   */
  public Adapter createCmdAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.CmdEq <em>Cmd Eq</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.CmdEq
   * @generated
   */
  public Adapter createCmdEqAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.CmdNEq <em>Cmd NEq</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.CmdNEq
   * @generated
   */
  public Adapter createCmdNEqAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.CmdGECompare <em>Cmd GE Compare</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.CmdGECompare
   * @generated
   */
  public Adapter createCmdGECompareAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.CmdLECompare <em>Cmd LE Compare</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.CmdLECompare
   * @generated
   */
  public Adapter createCmdLECompareAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.CmdGCompare <em>Cmd GCompare</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.CmdGCompare
   * @generated
   */
  public Adapter createCmdGCompareAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.CmdLCompare <em>Cmd LCompare</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.CmdLCompare
   * @generated
   */
  public Adapter createCmdLCompareAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.CmdAdd <em>Cmd Add</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.CmdAdd
   * @generated
   */
  public Adapter createCmdAddAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.CmdSub <em>Cmd Sub</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.CmdSub
   * @generated
   */
  public Adapter createCmdSubAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.IntLitCmd <em>Int Lit Cmd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.IntLitCmd
   * @generated
   */
  public Adapter createIntLitCmdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.GBoolTrue <em>GBool True</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.GBoolTrue
   * @generated
   */
  public Adapter createGBoolTrueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.GBoolFalse <em>GBool False</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.GBoolFalse
   * @generated
   */
  public Adapter createGBoolFalseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.StringLit <em>String Lit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.StringLit
   * @generated
   */
  public Adapter createStringLitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.PortLit <em>Port Lit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.PortLit
   * @generated
   */
  public Adapter createPortLitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.InPort <em>In Port</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.InPort
   * @generated
   */
  public Adapter createInPortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.mleduc.gpfl.gpfl.OutPort <em>Out Port</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.mleduc.gpfl.gpfl.OutPort
   * @generated
   */
  public Adapter createOutPortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //GpflAdapterFactory
