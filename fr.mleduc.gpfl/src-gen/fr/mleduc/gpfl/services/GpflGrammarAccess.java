/*
 * generated by Xtext 2.13.0
 */
package fr.mleduc.gpfl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class GpflGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cPROLOGUEKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAUTOMATASKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAutomatasAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAutomatasAutomataDefParserRuleCall_4_1_0 = (RuleCall)cAutomatasAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cINITKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInitStmtsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInitStmtsStmtParserRuleCall_5_1_0 = (RuleCall)cInitStmtsAssignment_5_1.eContents().get(0);
		private final Keyword cFILTERKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStmtsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStmtsStmtParserRuleCall_7_0 = (RuleCall)cStmtsAssignment_7.eContents().get(0);
		
		//Program:
		//	{Program}
		//	'package' name=ID
		//	"PROLOGUE" ("AUTOMATAS" automatas+=AutomataDef*)? ("INIT" initStmts+=Stmt*)?
		//	"FILTER"
		//	stmts+=Stmt*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Program} 'package' name=ID "PROLOGUE" ("AUTOMATAS" automatas+=AutomataDef*)? ("INIT" initStmts+=Stmt*)? "FILTER"
		//stmts+=Stmt*
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"PROLOGUE"
		public Keyword getPROLOGUEKeyword_3() { return cPROLOGUEKeyword_3; }
		
		//("AUTOMATAS" automatas+=AutomataDef*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"AUTOMATAS"
		public Keyword getAUTOMATASKeyword_4_0() { return cAUTOMATASKeyword_4_0; }
		
		//automatas+=AutomataDef*
		public Assignment getAutomatasAssignment_4_1() { return cAutomatasAssignment_4_1; }
		
		//AutomataDef
		public RuleCall getAutomatasAutomataDefParserRuleCall_4_1_0() { return cAutomatasAutomataDefParserRuleCall_4_1_0; }
		
		//("INIT" initStmts+=Stmt*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"INIT"
		public Keyword getINITKeyword_5_0() { return cINITKeyword_5_0; }
		
		//initStmts+=Stmt*
		public Assignment getInitStmtsAssignment_5_1() { return cInitStmtsAssignment_5_1; }
		
		//Stmt
		public RuleCall getInitStmtsStmtParserRuleCall_5_1_0() { return cInitStmtsStmtParserRuleCall_5_1_0; }
		
		//"FILTER"
		public Keyword getFILTERKeyword_6() { return cFILTERKeyword_6; }
		
		//stmts+=Stmt*
		public Assignment getStmtsAssignment_7() { return cStmtsAssignment_7; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_7_0() { return cStmtsStmtParserRuleCall_7_0; }
	}
	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCmdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCondStmtAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCondKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpXExpressionParserRuleCall_1_3_0 = (RuleCall)cExpAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cStmtsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cStmtsStmtParserRuleCall_1_5_0 = (RuleCall)cStmtsAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIterStmtAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cIterKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cExpAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cExpXExpressionParserRuleCall_2_3_0 = (RuleCall)cExpAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cStmtsAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cStmtsStmtParserRuleCall_2_5_0 = (RuleCall)cStmtsAssignment_2_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cInterruptStmtAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cNewInterruptKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cTimeoutAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cTimeoutINTTerminalRuleCall_3_3_0 = (RuleCall)cTimeoutAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cPeriodicAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cPeriodicXBooleanLiteralParserRuleCall_3_5_0 = (RuleCall)cPeriodicAssignment_3_5.eContents().get(0);
		private final Keyword cCommaKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Assignment cStmtsAssignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final RuleCall cStmtsStmtParserRuleCall_3_7_0 = (RuleCall)cStmtsAssignment_3_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		
		//Stmt xbase::XExpression:
		//	Cmd | {CondStmt} "cond" "(" exp=XExpression "," stmts+=Stmt* ")" | {IterStmt} "iter" "(" exp=XExpression ","
		//	stmts+=Stmt* ")" | {InterruptStmt} "newInterrupt" "(" timeout=INT "," periodic=XBooleanLiteral "," stmts+=Stmt* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Cmd | {CondStmt} "cond" "(" exp=XExpression "," stmts+=Stmt* ")" | {IterStmt} "iter" "(" exp=XExpression ","
		//stmts+=Stmt* ")" | {InterruptStmt} "newInterrupt" "(" timeout=INT "," periodic=XBooleanLiteral "," stmts+=Stmt* ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Cmd
		public RuleCall getCmdParserRuleCall_0() { return cCmdParserRuleCall_0; }
		
		//{CondStmt} "cond" "(" exp=XExpression "," stmts+=Stmt* ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//{CondStmt}
		public Action getCondStmtAction_1_0() { return cCondStmtAction_1_0; }
		
		//"cond"
		public Keyword getCondKeyword_1_1() { return cCondKeyword_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//exp=XExpression
		public Assignment getExpAssignment_1_3() { return cExpAssignment_1_3; }
		
		//XExpression
		public RuleCall getExpXExpressionParserRuleCall_1_3_0() { return cExpXExpressionParserRuleCall_1_3_0; }
		
		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }
		
		//stmts+=Stmt*
		public Assignment getStmtsAssignment_1_5() { return cStmtsAssignment_1_5; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_1_5_0() { return cStmtsStmtParserRuleCall_1_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
		
		//{IterStmt} "iter" "(" exp=XExpression "," stmts+=Stmt* ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//{IterStmt}
		public Action getIterStmtAction_2_0() { return cIterStmtAction_2_0; }
		
		//"iter"
		public Keyword getIterKeyword_2_1() { return cIterKeyword_2_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//exp=XExpression
		public Assignment getExpAssignment_2_3() { return cExpAssignment_2_3; }
		
		//XExpression
		public RuleCall getExpXExpressionParserRuleCall_2_3_0() { return cExpXExpressionParserRuleCall_2_3_0; }
		
		//","
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }
		
		//stmts+=Stmt*
		public Assignment getStmtsAssignment_2_5() { return cStmtsAssignment_2_5; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_2_5_0() { return cStmtsStmtParserRuleCall_2_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }
		
		//{InterruptStmt} "newInterrupt" "(" timeout=INT "," periodic=XBooleanLiteral "," stmts+=Stmt* ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//{InterruptStmt}
		public Action getInterruptStmtAction_3_0() { return cInterruptStmtAction_3_0; }
		
		//"newInterrupt"
		public Keyword getNewInterruptKeyword_3_1() { return cNewInterruptKeyword_3_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//timeout=INT
		public Assignment getTimeoutAssignment_3_3() { return cTimeoutAssignment_3_3; }
		
		//INT
		public RuleCall getTimeoutINTTerminalRuleCall_3_3_0() { return cTimeoutINTTerminalRuleCall_3_3_0; }
		
		//","
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }
		
		//periodic=XBooleanLiteral
		public Assignment getPeriodicAssignment_3_5() { return cPeriodicAssignment_3_5; }
		
		//XBooleanLiteral
		public RuleCall getPeriodicXBooleanLiteralParserRuleCall_3_5_0() { return cPeriodicXBooleanLiteralParserRuleCall_3_5_0; }
		
		//","
		public Keyword getCommaKeyword_3_6() { return cCommaKeyword_3_6; }
		
		//stmts+=Stmt*
		public Assignment getStmtsAssignment_3_7() { return cStmtsAssignment_3_7; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_3_7_0() { return cStmtsStmtParserRuleCall_3_7_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_8() { return cRightParenthesisKeyword_3_8; }
	}
	public class CmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.Cmd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNopCmdAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAcceptCmdAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAcceptKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDropCmdAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDropKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSendCmdAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSendKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cPortAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cPortPortParserRuleCall_3_3_0 = (RuleCall)cPortAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cFieldsAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cFieldsFieldParserRuleCall_3_5_0 = (RuleCall)cFieldsAssignment_3_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAlarmCmdAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cAlarmKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cExpAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cExpXExpressionParserRuleCall_4_3_0 = (RuleCall)cExpAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSetCmdAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cSetKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cNameAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_5_3_0 = (RuleCall)cNameAssignment_5_3.eContents().get(0);
		private final Keyword cCommaKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cExpAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cExpXExpressionParserRuleCall_5_5_0 = (RuleCall)cExpAssignment_5_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cAutomatonCmdAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cNewAutomatonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cNameAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_6_3_0 = (RuleCall)cNameAssignment_6_3.eContents().get(0);
		private final Keyword cCommaKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cAutomatonAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final CrossReference cAutomatonAutomataDefCrossReference_6_5_0 = (CrossReference)cAutomatonAssignment_6_5.eContents().get(0);
		private final RuleCall cAutomatonAutomataDefIDTerminalRuleCall_6_5_0_1 = (RuleCall)cAutomatonAutomataDefCrossReference_6_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cStpCmdAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cStepKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cAutomatonAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final CrossReference cAutomatonAutomatonCmdCrossReference_7_3_0 = (CrossReference)cAutomatonAssignment_7_3.eContents().get(0);
		private final RuleCall cAutomatonAutomatonCmdIDTerminalRuleCall_7_3_0_1 = (RuleCall)cAutomatonAutomatonCmdCrossReference_7_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cEventAssignment_7_5 = (Assignment)cGroup_7.eContents().get(5);
		private final RuleCall cEventXExpressionParserRuleCall_7_5_0 = (RuleCall)cEventAssignment_7_5.eContents().get(0);
		private final Keyword cCommaKeyword_7_6 = (Keyword)cGroup_7.eContents().get(6);
		private final Assignment cErrorsAssignment_7_7 = (Assignment)cGroup_7.eContents().get(7);
		private final RuleCall cErrorsStmtParserRuleCall_7_7_0 = (RuleCall)cErrorsAssignment_7_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_8 = (Keyword)cGroup_7.eContents().get(8);
		
		//Cmd xbase::XExpression:
		//	{NopCmd} "nop" | {AcceptCmd} "accept" | {DropCmd} "drop" | {SendCmd} "send" "(" port=Port "," fields+=Field* ")" |
		//	{AlarmCmd} "alarm" "(" exp=XExpression ")" | {SetCmd} "set" "(" name=ID "," exp=XExpression ")" | {AutomatonCmd}
		//	"newAutomaton" "(" name=ID "," automaton=[AutomataDef] ")" | {StpCmd} "step" "(" automaton=[AutomatonCmd] ","
		//	event=XExpression "," errors+=Stmt* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{NopCmd} "nop" | {AcceptCmd} "accept" | {DropCmd} "drop" | {SendCmd} "send" "(" port=Port "," fields+=Field* ")" |
		//{AlarmCmd} "alarm" "(" exp=XExpression ")" | {SetCmd} "set" "(" name=ID "," exp=XExpression ")" | {AutomatonCmd}
		//"newAutomaton" "(" name=ID "," automaton=[AutomataDef] ")" | {StpCmd} "step" "(" automaton=[AutomatonCmd] ","
		//event=XExpression "," errors+=Stmt* ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NopCmd} "nop"
		public Group getGroup_0() { return cGroup_0; }
		
		//{NopCmd}
		public Action getNopCmdAction_0_0() { return cNopCmdAction_0_0; }
		
		//"nop"
		public Keyword getNopKeyword_0_1() { return cNopKeyword_0_1; }
		
		//{AcceptCmd} "accept"
		public Group getGroup_1() { return cGroup_1; }
		
		//{AcceptCmd}
		public Action getAcceptCmdAction_1_0() { return cAcceptCmdAction_1_0; }
		
		//"accept"
		public Keyword getAcceptKeyword_1_1() { return cAcceptKeyword_1_1; }
		
		//{DropCmd} "drop"
		public Group getGroup_2() { return cGroup_2; }
		
		//{DropCmd}
		public Action getDropCmdAction_2_0() { return cDropCmdAction_2_0; }
		
		//"drop"
		public Keyword getDropKeyword_2_1() { return cDropKeyword_2_1; }
		
		//{SendCmd} "send" "(" port=Port "," fields+=Field* ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//{SendCmd}
		public Action getSendCmdAction_3_0() { return cSendCmdAction_3_0; }
		
		//"send"
		public Keyword getSendKeyword_3_1() { return cSendKeyword_3_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//port=Port
		public Assignment getPortAssignment_3_3() { return cPortAssignment_3_3; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_3_3_0() { return cPortPortParserRuleCall_3_3_0; }
		
		//","
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_3_5() { return cFieldsAssignment_3_5; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_3_5_0() { return cFieldsFieldParserRuleCall_3_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_6() { return cRightParenthesisKeyword_3_6; }
		
		//{AlarmCmd} "alarm" "(" exp=XExpression ")"
		public Group getGroup_4() { return cGroup_4; }
		
		//{AlarmCmd}
		public Action getAlarmCmdAction_4_0() { return cAlarmCmdAction_4_0; }
		
		//"alarm"
		public Keyword getAlarmKeyword_4_1() { return cAlarmKeyword_4_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//exp=XExpression
		public Assignment getExpAssignment_4_3() { return cExpAssignment_4_3; }
		
		//XExpression
		public RuleCall getExpXExpressionParserRuleCall_4_3_0() { return cExpXExpressionParserRuleCall_4_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//{SetCmd} "set" "(" name=ID "," exp=XExpression ")"
		public Group getGroup_5() { return cGroup_5; }
		
		//{SetCmd}
		public Action getSetCmdAction_5_0() { return cSetCmdAction_5_0; }
		
		//"set"
		public Keyword getSetKeyword_5_1() { return cSetKeyword_5_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//name=ID
		public Assignment getNameAssignment_5_3() { return cNameAssignment_5_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_3_0() { return cNameIDTerminalRuleCall_5_3_0; }
		
		//","
		public Keyword getCommaKeyword_5_4() { return cCommaKeyword_5_4; }
		
		//exp=XExpression
		public Assignment getExpAssignment_5_5() { return cExpAssignment_5_5; }
		
		//XExpression
		public RuleCall getExpXExpressionParserRuleCall_5_5_0() { return cExpXExpressionParserRuleCall_5_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5_6() { return cRightParenthesisKeyword_5_6; }
		
		//{AutomatonCmd} "newAutomaton" "(" name=ID "," automaton=[AutomataDef] ")"
		public Group getGroup_6() { return cGroup_6; }
		
		//{AutomatonCmd}
		public Action getAutomatonCmdAction_6_0() { return cAutomatonCmdAction_6_0; }
		
		//"newAutomaton"
		public Keyword getNewAutomatonKeyword_6_1() { return cNewAutomatonKeyword_6_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }
		
		//name=ID
		public Assignment getNameAssignment_6_3() { return cNameAssignment_6_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_3_0() { return cNameIDTerminalRuleCall_6_3_0; }
		
		//","
		public Keyword getCommaKeyword_6_4() { return cCommaKeyword_6_4; }
		
		//automaton=[AutomataDef]
		public Assignment getAutomatonAssignment_6_5() { return cAutomatonAssignment_6_5; }
		
		//[AutomataDef]
		public CrossReference getAutomatonAutomataDefCrossReference_6_5_0() { return cAutomatonAutomataDefCrossReference_6_5_0; }
		
		//ID
		public RuleCall getAutomatonAutomataDefIDTerminalRuleCall_6_5_0_1() { return cAutomatonAutomataDefIDTerminalRuleCall_6_5_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6_6() { return cRightParenthesisKeyword_6_6; }
		
		//{StpCmd} "step" "(" automaton=[AutomatonCmd] "," event=XExpression "," errors+=Stmt* ")"
		public Group getGroup_7() { return cGroup_7; }
		
		//{StpCmd}
		public Action getStpCmdAction_7_0() { return cStpCmdAction_7_0; }
		
		//"step"
		public Keyword getStepKeyword_7_1() { return cStepKeyword_7_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }
		
		//automaton=[AutomatonCmd]
		public Assignment getAutomatonAssignment_7_3() { return cAutomatonAssignment_7_3; }
		
		//[AutomatonCmd]
		public CrossReference getAutomatonAutomatonCmdCrossReference_7_3_0() { return cAutomatonAutomatonCmdCrossReference_7_3_0; }
		
		//ID
		public RuleCall getAutomatonAutomatonCmdIDTerminalRuleCall_7_3_0_1() { return cAutomatonAutomatonCmdIDTerminalRuleCall_7_3_0_1; }
		
		//","
		public Keyword getCommaKeyword_7_4() { return cCommaKeyword_7_4; }
		
		//event=XExpression
		public Assignment getEventAssignment_7_5() { return cEventAssignment_7_5; }
		
		//XExpression
		public RuleCall getEventXExpressionParserRuleCall_7_5_0() { return cEventXExpressionParserRuleCall_7_5_0; }
		
		//","
		public Keyword getCommaKeyword_7_6() { return cCommaKeyword_7_6; }
		
		//errors+=Stmt*
		public Assignment getErrorsAssignment_7_7() { return cErrorsAssignment_7_7; }
		
		//Stmt
		public RuleCall getErrorsStmtParserRuleCall_7_7_0() { return cErrorsStmtParserRuleCall_7_7_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7_8() { return cRightParenthesisKeyword_7_8; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueXExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Field:
		//	name=ID '->' value=XExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '->' value=XExpression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//value=XExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_2_0() { return cValueXExpressionParserRuleCall_2_0; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInPortAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cInSideKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutPortAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOutSideKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Port xbase::XExpression:
		//	{InPort} "inSide" | {OutPort} "outSide";
		@Override public ParserRule getRule() { return rule; }
		
		//{InPort} "inSide" | {OutPort} "outSide"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{InPort} "inSide"
		public Group getGroup_0() { return cGroup_0; }
		
		//{InPort}
		public Action getInPortAction_0_0() { return cInPortAction_0_0; }
		
		//"inSide"
		public Keyword getInSideKeyword_0_1() { return cInSideKeyword_0_1; }
		
		//{OutPort} "outSide"
		public Group getGroup_1() { return cGroup_1; }
		
		//{OutPort}
		public Action getOutPortAction_1_0() { return cOutPortAction_1_0; }
		
		//"outSide"
		public Keyword getOutSideKeyword_1_1() { return cOutSideKeyword_1_1; }
	}
	public class AutomataDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.AutomataDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAUTOMATAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInitKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cInitStateCrossReference_4_0 = (CrossReference)cInitAssignment_4.eContents().get(0);
		private final RuleCall cInitStateIDTerminalRuleCall_4_0_1 = (RuleCall)cInitStateCrossReference_4_0.eContents().get(1);
		private final Assignment cStatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesStateParserRuleCall_5_0 = (RuleCall)cStatesAssignment_5.eContents().get(0);
		
		//AutomataDef:
		//	"AUTOMATA" name=ID "init" "=" init=[State] states+=State*;
		@Override public ParserRule getRule() { return rule; }
		
		//"AUTOMATA" name=ID "init" "=" init=[State] states+=State*
		public Group getGroup() { return cGroup; }
		
		//"AUTOMATA"
		public Keyword getAUTOMATAKeyword_0() { return cAUTOMATAKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"init"
		public Keyword getInitKeyword_2() { return cInitKeyword_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//init=[State]
		public Assignment getInitAssignment_4() { return cInitAssignment_4; }
		
		//[State]
		public CrossReference getInitStateCrossReference_4_0() { return cInitStateCrossReference_4_0; }
		
		//ID
		public RuleCall getInitStateIDTerminalRuleCall_4_0_1() { return cInitStateIDTerminalRuleCall_4_0_1; }
		
		//states+=State*
		public Assignment getStatesAssignment_5() { return cStatesAssignment_5; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_5_0() { return cStatesStateParserRuleCall_5_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTransitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_1_0 = (RuleCall)cTransitionsAssignment_1.eContents().get(0);
		
		//State:
		//	name=ID transitions+=Transition*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID transitions+=Transition*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//transitions+=Transition*
		public Assignment getTransitionsAssignment_1() { return cTransitionsAssignment_1; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_1_0() { return cTransitionsTransitionParserRuleCall_1_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventIDTerminalRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStateCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetStateCrossReference_3_0.eContents().get(1);
		
		//Transition: // automata events are primitives of the language
		//	'-' event=ID '->' target=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//// automata events are primitives of the language
		//'-' event=ID '->' target=[State]
		public Group getGroup() { return cGroup; }
		
		//// automata events are primitives of the language
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//event=ID
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//ID
		public RuleCall getEventIDTerminalRuleCall_1_0() { return cEventIDTerminalRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//target=[State]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[State]
		public CrossReference getTargetStateCrossReference_3_0() { return cTargetStateCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_3_0_1() { return cTargetStateIDTerminalRuleCall_3_0_1; }
	}
	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@ Override XLiteral xbase::XExpression:
		//	Xbase::XLiteral | Port;
		@Override public ParserRule getRule() { return rule; }
		
		//Xbase::XLiteral | Port
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Xbase::XLiteral
		public RuleCall getXLiteralParserRuleCall_0() { return cXLiteralParserRuleCall_0; }
		
		//Port
		public RuleCall getPortParserRuleCall_1() { return cPortParserRuleCall_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final StmtElements pStmt;
	private final CmdElements pCmd;
	private final FieldElements pField;
	private final PortElements pPort;
	private final AutomataDefElements pAutomataDef;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final XLiteralElements pXLiteral;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public GpflGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pProgram = new ProgramElements();
		this.pStmt = new StmtElements();
		this.pCmd = new CmdElements();
		this.pField = new FieldElements();
		this.pPort = new PortElements();
		this.pAutomataDef = new AutomataDefElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pXLiteral = new XLiteralElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.mleduc.gpfl.Gpfl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Program:
	//	{Program}
	//	'package' name=ID
	//	"PROLOGUE" ("AUTOMATAS" automatas+=AutomataDef*)? ("INIT" initStmts+=Stmt*)?
	//	"FILTER"
	//	stmts+=Stmt*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Stmt xbase::XExpression:
	//	Cmd | {CondStmt} "cond" "(" exp=XExpression "," stmts+=Stmt* ")" | {IterStmt} "iter" "(" exp=XExpression ","
	//	stmts+=Stmt* ")" | {InterruptStmt} "newInterrupt" "(" timeout=INT "," periodic=XBooleanLiteral "," stmts+=Stmt* ")";
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}
	
	//Cmd xbase::XExpression:
	//	{NopCmd} "nop" | {AcceptCmd} "accept" | {DropCmd} "drop" | {SendCmd} "send" "(" port=Port "," fields+=Field* ")" |
	//	{AlarmCmd} "alarm" "(" exp=XExpression ")" | {SetCmd} "set" "(" name=ID "," exp=XExpression ")" | {AutomatonCmd}
	//	"newAutomaton" "(" name=ID "," automaton=[AutomataDef] ")" | {StpCmd} "step" "(" automaton=[AutomatonCmd] ","
	//	event=XExpression "," errors+=Stmt* ")";
	public CmdElements getCmdAccess() {
		return pCmd;
	}
	
	public ParserRule getCmdRule() {
		return getCmdAccess().getRule();
	}
	
	//Field:
	//	name=ID '->' value=XExpression;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Port xbase::XExpression:
	//	{InPort} "inSide" | {OutPort} "outSide";
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//AutomataDef:
	//	"AUTOMATA" name=ID "init" "=" init=[State] states+=State*;
	public AutomataDefElements getAutomataDefAccess() {
		return pAutomataDef;
	}
	
	public ParserRule getAutomataDefRule() {
		return getAutomataDefAccess().getRule();
	}
	
	//State:
	//	name=ID transitions+=Transition*;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition: // automata events are primitives of the language
	//	'-' event=ID '->' target=[State];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//@ Override XLiteral xbase::XExpression:
	//	Xbase::XLiteral | Port;
	public XLiteralElements getXLiteralAccess() {
		return pXLiteral;
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | super::XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXbaseXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXbaseXLiteralRule() {
		return getXbaseXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@ Override QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */ StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
