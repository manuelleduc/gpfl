/*
 * generated by Xtext 2.12.0
 */
package fr.mleduc.gpfl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GpflGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cPROLOGUEKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAUTOMATASKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAutomatasAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAutomatasAutomataDefParserRuleCall_4_1_0 = (RuleCall)cAutomatasAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cINITKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInitStmtsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInitStmtsGExpressionParserRuleCall_5_1_0 = (RuleCall)cInitStmtsAssignment_5_1.eContents().get(0);
		private final Keyword cFILTERKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStmtsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStmtsGExpressionParserRuleCall_7_0 = (RuleCall)cStmtsAssignment_7.eContents().get(0);
		
		////import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
		//Program:
		//	{Program}
		//	'package' name=ID
		//	"PROLOGUE" ("AUTOMATAS" automatas+=AutomataDef*)? ("INIT" initStmts+=GExpression*)?
		//	"FILTER"
		//	stmts+=GExpression*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Program} 'package' name=ID "PROLOGUE" ("AUTOMATAS" automatas+=AutomataDef*)? ("INIT" initStmts+=GExpression*)? "FILTER"
		//stmts+=GExpression*
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"PROLOGUE"
		public Keyword getPROLOGUEKeyword_3() { return cPROLOGUEKeyword_3; }
		
		//("AUTOMATAS" automatas+=AutomataDef*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"AUTOMATAS"
		public Keyword getAUTOMATASKeyword_4_0() { return cAUTOMATASKeyword_4_0; }
		
		//automatas+=AutomataDef*
		public Assignment getAutomatasAssignment_4_1() { return cAutomatasAssignment_4_1; }
		
		//AutomataDef
		public RuleCall getAutomatasAutomataDefParserRuleCall_4_1_0() { return cAutomatasAutomataDefParserRuleCall_4_1_0; }
		
		//("INIT" initStmts+=GExpression*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"INIT"
		public Keyword getINITKeyword_5_0() { return cINITKeyword_5_0; }
		
		//initStmts+=GExpression*
		public Assignment getInitStmtsAssignment_5_1() { return cInitStmtsAssignment_5_1; }
		
		//GExpression
		public RuleCall getInitStmtsGExpressionParserRuleCall_5_1_0() { return cInitStmtsGExpressionParserRuleCall_5_1_0; }
		
		//"FILTER"
		public Keyword getFILTERKeyword_6() { return cFILTERKeyword_6; }
		
		//stmts+=GExpression*
		public Assignment getStmtsAssignment_7() { return cStmtsAssignment_7; }
		
		//GExpression
		public RuleCall getStmtsGExpressionParserRuleCall_7_0() { return cStmtsGExpressionParserRuleCall_7_0; }
	}
	public class GExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.GExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCmdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCondStmtAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCondKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpGExpressionParserRuleCall_1_3_0 = (RuleCall)cExpAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cStmtsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cStmtsGExpressionParserRuleCall_1_5_0 = (RuleCall)cStmtsAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIterStmtAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cIterKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cExpAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cExpGExpressionParserRuleCall_2_3_0 = (RuleCall)cExpAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cStmtsAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cStmtsGExpressionParserRuleCall_2_5_0 = (RuleCall)cStmtsAssignment_2_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cInterruptStmtAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cNewInterruptKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cTimeoutAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cTimeoutINTTerminalRuleCall_3_3_0 = (RuleCall)cTimeoutAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cPeriodicAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cPeriodicGExpressionParserRuleCall_3_5_0 = (RuleCall)cPeriodicAssignment_3_5.eContents().get(0);
		private final Keyword cCommaKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Assignment cStmtsAssignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final RuleCall cStmtsGExpressionParserRuleCall_3_7_0 = (RuleCall)cStmtsAssignment_3_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		
		//GExpression:
		//	Cmd | {CondStmt} "cond" "(" exp=GExpression "," stmts+=GExpression* ")" | {IterStmt} "iter" "(" exp=GExpression ","
		//	stmts+=GExpression* ")" | {InterruptStmt} "newInterrupt" "(" timeout=INT "," periodic=GExpression ","
		//	stmts+=GExpression* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Cmd | {CondStmt} "cond" "(" exp=GExpression "," stmts+=GExpression* ")" | {IterStmt} "iter" "(" exp=GExpression ","
		//stmts+=GExpression* ")" | {InterruptStmt} "newInterrupt" "(" timeout=INT "," periodic=GExpression ","
		//stmts+=GExpression* ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Cmd
		public RuleCall getCmdParserRuleCall_0() { return cCmdParserRuleCall_0; }
		
		//{CondStmt} "cond" "(" exp=GExpression "," stmts+=GExpression* ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//{CondStmt}
		public Action getCondStmtAction_1_0() { return cCondStmtAction_1_0; }
		
		//"cond"
		public Keyword getCondKeyword_1_1() { return cCondKeyword_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//exp=GExpression
		public Assignment getExpAssignment_1_3() { return cExpAssignment_1_3; }
		
		//GExpression
		public RuleCall getExpGExpressionParserRuleCall_1_3_0() { return cExpGExpressionParserRuleCall_1_3_0; }
		
		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }
		
		//stmts+=GExpression*
		public Assignment getStmtsAssignment_1_5() { return cStmtsAssignment_1_5; }
		
		//GExpression
		public RuleCall getStmtsGExpressionParserRuleCall_1_5_0() { return cStmtsGExpressionParserRuleCall_1_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
		
		//{IterStmt} "iter" "(" exp=GExpression "," stmts+=GExpression* ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//{IterStmt}
		public Action getIterStmtAction_2_0() { return cIterStmtAction_2_0; }
		
		//"iter"
		public Keyword getIterKeyword_2_1() { return cIterKeyword_2_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//exp=GExpression
		public Assignment getExpAssignment_2_3() { return cExpAssignment_2_3; }
		
		//GExpression
		public RuleCall getExpGExpressionParserRuleCall_2_3_0() { return cExpGExpressionParserRuleCall_2_3_0; }
		
		//","
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }
		
		//stmts+=GExpression*
		public Assignment getStmtsAssignment_2_5() { return cStmtsAssignment_2_5; }
		
		//GExpression
		public RuleCall getStmtsGExpressionParserRuleCall_2_5_0() { return cStmtsGExpressionParserRuleCall_2_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }
		
		//{InterruptStmt} "newInterrupt" "(" timeout=INT "," periodic=GExpression "," stmts+=GExpression* ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//{InterruptStmt}
		public Action getInterruptStmtAction_3_0() { return cInterruptStmtAction_3_0; }
		
		//"newInterrupt"
		public Keyword getNewInterruptKeyword_3_1() { return cNewInterruptKeyword_3_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//timeout=INT
		public Assignment getTimeoutAssignment_3_3() { return cTimeoutAssignment_3_3; }
		
		//INT
		public RuleCall getTimeoutINTTerminalRuleCall_3_3_0() { return cTimeoutINTTerminalRuleCall_3_3_0; }
		
		//","
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }
		
		//periodic=GExpression
		public Assignment getPeriodicAssignment_3_5() { return cPeriodicAssignment_3_5; }
		
		//GExpression
		public RuleCall getPeriodicGExpressionParserRuleCall_3_5_0() { return cPeriodicGExpressionParserRuleCall_3_5_0; }
		
		//","
		public Keyword getCommaKeyword_3_6() { return cCommaKeyword_3_6; }
		
		//stmts+=GExpression*
		public Assignment getStmtsAssignment_3_7() { return cStmtsAssignment_3_7; }
		
		//GExpression
		public RuleCall getStmtsGExpressionParserRuleCall_3_7_0() { return cStmtsGExpressionParserRuleCall_3_7_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_8() { return cRightParenthesisKeyword_3_8; }
	}
	public class CmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.Cmd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNopCmdAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAcceptCmdAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAcceptKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDropCmdAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDropKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSendCmdAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSendKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cPortAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cPortPortParserRuleCall_3_3_0 = (RuleCall)cPortAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cFieldsAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cFieldsFieldParserRuleCall_3_5_0 = (RuleCall)cFieldsAssignment_3_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAlarmCmdAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cAlarmKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cExpAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cExpGExpressionParserRuleCall_4_3_0 = (RuleCall)cExpAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSetCmdAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cSetKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cNameAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_5_3_0 = (RuleCall)cNameAssignment_5_3.eContents().get(0);
		private final Keyword cCommaKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cExpAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cExpCmdExprParserRuleCall_5_5_0 = (RuleCall)cExpAssignment_5_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cAutomatonCmdAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cNewAutomatonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cNameAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_6_3_0 = (RuleCall)cNameAssignment_6_3.eContents().get(0);
		private final Keyword cCommaKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cAutomatonAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final CrossReference cAutomatonAutomataDefCrossReference_6_5_0 = (CrossReference)cAutomatonAssignment_6_5.eContents().get(0);
		private final RuleCall cAutomatonAutomataDefIDTerminalRuleCall_6_5_0_1 = (RuleCall)cAutomatonAutomataDefCrossReference_6_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cStpCmdAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cStepKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cAutomatonAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final CrossReference cAutomatonAutomatonCmdCrossReference_7_3_0 = (CrossReference)cAutomatonAssignment_7_3.eContents().get(0);
		private final RuleCall cAutomatonAutomatonCmdIDTerminalRuleCall_7_3_0_1 = (RuleCall)cAutomatonAutomatonCmdCrossReference_7_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cEventAssignment_7_5 = (Assignment)cGroup_7.eContents().get(5);
		private final RuleCall cEventGExpressionParserRuleCall_7_5_0 = (RuleCall)cEventAssignment_7_5.eContents().get(0);
		private final Keyword cCommaKeyword_7_6 = (Keyword)cGroup_7.eContents().get(6);
		private final Assignment cErrorsAssignment_7_7 = (Assignment)cGroup_7.eContents().get(7);
		private final RuleCall cErrorsGExpressionParserRuleCall_7_7_0 = (RuleCall)cErrorsAssignment_7_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_8 = (Keyword)cGroup_7.eContents().get(8);
		private final RuleCall cCmdExprParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Cmd GExpression:
		//	{NopCmd} "nop" | {AcceptCmd} "accept" | {DropCmd} "drop" | {SendCmd} "send" "(" port=Port "," fields+=Field* ")" |
		//	{AlarmCmd} "alarm" "(" exp=GExpression ")" | {SetCmd} "set" "(" name=ID "," exp=CmdExpr ")" | {AutomatonCmd}
		//	"newAutomaton" "(" name=ID "," automaton=[AutomataDef] ")" | {StpCmd} "step" "(" automaton=[AutomatonCmd] ","
		//	event=GExpression "," errors+=GExpression* ")" | CmdExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//{NopCmd} "nop" | {AcceptCmd} "accept" | {DropCmd} "drop" | {SendCmd} "send" "(" port=Port "," fields+=Field* ")" |
		//{AlarmCmd} "alarm" "(" exp=GExpression ")" | {SetCmd} "set" "(" name=ID "," exp=CmdExpr ")" | {AutomatonCmd}
		//"newAutomaton" "(" name=ID "," automaton=[AutomataDef] ")" | {StpCmd} "step" "(" automaton=[AutomatonCmd] ","
		//event=GExpression "," errors+=GExpression* ")" | CmdExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NopCmd} "nop"
		public Group getGroup_0() { return cGroup_0; }
		
		//{NopCmd}
		public Action getNopCmdAction_0_0() { return cNopCmdAction_0_0; }
		
		//"nop"
		public Keyword getNopKeyword_0_1() { return cNopKeyword_0_1; }
		
		//{AcceptCmd} "accept"
		public Group getGroup_1() { return cGroup_1; }
		
		//{AcceptCmd}
		public Action getAcceptCmdAction_1_0() { return cAcceptCmdAction_1_0; }
		
		//"accept"
		public Keyword getAcceptKeyword_1_1() { return cAcceptKeyword_1_1; }
		
		//{DropCmd} "drop"
		public Group getGroup_2() { return cGroup_2; }
		
		//{DropCmd}
		public Action getDropCmdAction_2_0() { return cDropCmdAction_2_0; }
		
		//"drop"
		public Keyword getDropKeyword_2_1() { return cDropKeyword_2_1; }
		
		//{SendCmd} "send" "(" port=Port "," fields+=Field* ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//{SendCmd}
		public Action getSendCmdAction_3_0() { return cSendCmdAction_3_0; }
		
		//"send"
		public Keyword getSendKeyword_3_1() { return cSendKeyword_3_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//port=Port
		public Assignment getPortAssignment_3_3() { return cPortAssignment_3_3; }
		
		//Port
		public RuleCall getPortPortParserRuleCall_3_3_0() { return cPortPortParserRuleCall_3_3_0; }
		
		//","
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_3_5() { return cFieldsAssignment_3_5; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_3_5_0() { return cFieldsFieldParserRuleCall_3_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_6() { return cRightParenthesisKeyword_3_6; }
		
		//{AlarmCmd} "alarm" "(" exp=GExpression ")"
		public Group getGroup_4() { return cGroup_4; }
		
		//{AlarmCmd}
		public Action getAlarmCmdAction_4_0() { return cAlarmCmdAction_4_0; }
		
		//"alarm"
		public Keyword getAlarmKeyword_4_1() { return cAlarmKeyword_4_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//exp=GExpression
		public Assignment getExpAssignment_4_3() { return cExpAssignment_4_3; }
		
		//GExpression
		public RuleCall getExpGExpressionParserRuleCall_4_3_0() { return cExpGExpressionParserRuleCall_4_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//{SetCmd} "set" "(" name=ID "," exp=CmdExpr ")"
		public Group getGroup_5() { return cGroup_5; }
		
		//{SetCmd}
		public Action getSetCmdAction_5_0() { return cSetCmdAction_5_0; }
		
		//"set"
		public Keyword getSetKeyword_5_1() { return cSetKeyword_5_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//name=ID
		public Assignment getNameAssignment_5_3() { return cNameAssignment_5_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_3_0() { return cNameIDTerminalRuleCall_5_3_0; }
		
		//","
		public Keyword getCommaKeyword_5_4() { return cCommaKeyword_5_4; }
		
		//exp=CmdExpr
		public Assignment getExpAssignment_5_5() { return cExpAssignment_5_5; }
		
		//CmdExpr
		public RuleCall getExpCmdExprParserRuleCall_5_5_0() { return cExpCmdExprParserRuleCall_5_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5_6() { return cRightParenthesisKeyword_5_6; }
		
		//{AutomatonCmd} "newAutomaton" "(" name=ID "," automaton=[AutomataDef] ")"
		public Group getGroup_6() { return cGroup_6; }
		
		//{AutomatonCmd}
		public Action getAutomatonCmdAction_6_0() { return cAutomatonCmdAction_6_0; }
		
		//"newAutomaton"
		public Keyword getNewAutomatonKeyword_6_1() { return cNewAutomatonKeyword_6_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }
		
		//name=ID
		public Assignment getNameAssignment_6_3() { return cNameAssignment_6_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_3_0() { return cNameIDTerminalRuleCall_6_3_0; }
		
		//","
		public Keyword getCommaKeyword_6_4() { return cCommaKeyword_6_4; }
		
		//automaton=[AutomataDef]
		public Assignment getAutomatonAssignment_6_5() { return cAutomatonAssignment_6_5; }
		
		//[AutomataDef]
		public CrossReference getAutomatonAutomataDefCrossReference_6_5_0() { return cAutomatonAutomataDefCrossReference_6_5_0; }
		
		//ID
		public RuleCall getAutomatonAutomataDefIDTerminalRuleCall_6_5_0_1() { return cAutomatonAutomataDefIDTerminalRuleCall_6_5_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6_6() { return cRightParenthesisKeyword_6_6; }
		
		//{StpCmd} "step" "(" automaton=[AutomatonCmd] "," event=GExpression "," errors+=GExpression* ")"
		public Group getGroup_7() { return cGroup_7; }
		
		//{StpCmd}
		public Action getStpCmdAction_7_0() { return cStpCmdAction_7_0; }
		
		//"step"
		public Keyword getStepKeyword_7_1() { return cStepKeyword_7_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }
		
		//automaton=[AutomatonCmd]
		public Assignment getAutomatonAssignment_7_3() { return cAutomatonAssignment_7_3; }
		
		//[AutomatonCmd]
		public CrossReference getAutomatonAutomatonCmdCrossReference_7_3_0() { return cAutomatonAutomatonCmdCrossReference_7_3_0; }
		
		//ID
		public RuleCall getAutomatonAutomatonCmdIDTerminalRuleCall_7_3_0_1() { return cAutomatonAutomatonCmdIDTerminalRuleCall_7_3_0_1; }
		
		//","
		public Keyword getCommaKeyword_7_4() { return cCommaKeyword_7_4; }
		
		//event=GExpression
		public Assignment getEventAssignment_7_5() { return cEventAssignment_7_5; }
		
		//GExpression
		public RuleCall getEventGExpressionParserRuleCall_7_5_0() { return cEventGExpressionParserRuleCall_7_5_0; }
		
		//","
		public Keyword getCommaKeyword_7_6() { return cCommaKeyword_7_6; }
		
		//errors+=GExpression*
		public Assignment getErrorsAssignment_7_7() { return cErrorsAssignment_7_7; }
		
		//GExpression
		public RuleCall getErrorsGExpressionParserRuleCall_7_7_0() { return cErrorsGExpressionParserRuleCall_7_7_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7_8() { return cRightParenthesisKeyword_7_8; }
		
		//CmdExpr
		public RuleCall getCmdExprParserRuleCall_8() { return cCmdExprParserRuleCall_8; }
	}
	public class CmdExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.CmdExpr");
		private final RuleCall cCmdOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CmdExpr GExpression:
		//	CmdOr;
		@Override public ParserRule getRule() { return rule; }
		
		//CmdOr
		public RuleCall getCmdOrParserRuleCall() { return cCmdOrParserRuleCall; }
	}
	public class CmdOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.CmdOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCmdAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCmdAndLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCmdAndParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CmdOr GExpression:
		//	CmdAnd (=> ({CmdAnd.left=current} '||') right=CmdAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CmdAnd (=> ({CmdAnd.left=current} '||') right=CmdAnd)*
		public Group getGroup() { return cGroup; }
		
		//CmdAnd
		public RuleCall getCmdAndParserRuleCall_0() { return cCmdAndParserRuleCall_0; }
		
		//(=> ({CmdAnd.left=current} '||') right=CmdAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({CmdAnd.left=current} '||')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{CmdAnd.left=current} '||'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{CmdAnd.left=current}
		public Action getCmdAndLeftAction_1_0_0_0() { return cCmdAndLeftAction_1_0_0_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0_0_1() { return cVerticalLineVerticalLineKeyword_1_0_0_1; }
		
		//right=CmdAnd
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//CmdAnd
		public RuleCall getRightCmdAndParserRuleCall_1_1_0() { return cRightCmdAndParserRuleCall_1_1_0; }
	}
	public class CmdAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.CmdAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCmdEqParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCmdAndLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCmdEqParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CmdAnd GExpression:
		//	CmdEq (=> ({CmdAnd.left=current} '&&') right=CmdEq)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CmdEq (=> ({CmdAnd.left=current} '&&') right=CmdEq)*
		public Group getGroup() { return cGroup; }
		
		//CmdEq
		public RuleCall getCmdEqParserRuleCall_0() { return cCmdEqParserRuleCall_0; }
		
		//(=> ({CmdAnd.left=current} '&&') right=CmdEq)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({CmdAnd.left=current} '&&')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{CmdAnd.left=current} '&&'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{CmdAnd.left=current}
		public Action getCmdAndLeftAction_1_0_0_0() { return cCmdAndLeftAction_1_0_0_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0_0_1() { return cAmpersandAmpersandKeyword_1_0_0_1; }
		
		//right=CmdEq
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//CmdEq
		public RuleCall getRightCmdEqParserRuleCall_1_1_0() { return cRightCmdEqParserRuleCall_1_1_0; }
	}
	public class CmdEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.CmdEq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCmdNeqParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCmdEqLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCmdNeqParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CmdEq GExpression:
		//	CmdNeq (=> ({CmdEq.left=current} '==') right=CmdNeq)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CmdNeq (=> ({CmdEq.left=current} '==') right=CmdNeq)*
		public Group getGroup() { return cGroup; }
		
		//CmdNeq
		public RuleCall getCmdNeqParserRuleCall_0() { return cCmdNeqParserRuleCall_0; }
		
		//(=> ({CmdEq.left=current} '==') right=CmdNeq)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({CmdEq.left=current} '==')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{CmdEq.left=current} '=='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{CmdEq.left=current}
		public Action getCmdEqLeftAction_1_0_0_0() { return cCmdEqLeftAction_1_0_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_1; }
		
		//right=CmdNeq
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//CmdNeq
		public RuleCall getRightCmdNeqParserRuleCall_1_1_0() { return cRightCmdNeqParserRuleCall_1_1_0; }
	}
	public class CmdNeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.CmdNeq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCmdGECompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCmdNEqLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCmdGECompareParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CmdNeq GExpression:
		//	CmdGECompare (=> ({CmdNEq.left=current} '!=') right=CmdGECompare)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CmdGECompare (=> ({CmdNEq.left=current} '!=') right=CmdGECompare)*
		public Group getGroup() { return cGroup; }
		
		//CmdGECompare
		public RuleCall getCmdGECompareParserRuleCall_0() { return cCmdGECompareParserRuleCall_0; }
		
		//(=> ({CmdNEq.left=current} '!=') right=CmdGECompare)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({CmdNEq.left=current} '!=')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{CmdNEq.left=current} '!='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{CmdNEq.left=current}
		public Action getCmdNEqLeftAction_1_0_0_0() { return cCmdNEqLeftAction_1_0_0_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_0_1; }
		
		//right=CmdGECompare
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//CmdGECompare
		public RuleCall getRightCmdGECompareParserRuleCall_1_1_0() { return cRightCmdGECompareParserRuleCall_1_1_0; }
	}
	public class CmdGECompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.CmdGECompare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCmdLECompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCmdGECompareLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCmdLECompareParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CmdGECompare GExpression:
		//	CmdLECompare (=> ({CmdGECompare.left=current} '>=') right=CmdLECompare)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CmdLECompare (=> ({CmdGECompare.left=current} '>=') right=CmdLECompare)*
		public Group getGroup() { return cGroup; }
		
		//CmdLECompare
		public RuleCall getCmdLECompareParserRuleCall_0() { return cCmdLECompareParserRuleCall_0; }
		
		//(=> ({CmdGECompare.left=current} '>=') right=CmdLECompare)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({CmdGECompare.left=current} '>=')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{CmdGECompare.left=current} '>='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{CmdGECompare.left=current}
		public Action getCmdGECompareLeftAction_1_0_0_0() { return cCmdGECompareLeftAction_1_0_0_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_0_1() { return cGreaterThanSignEqualsSignKeyword_1_0_0_1; }
		
		//right=CmdLECompare
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//CmdLECompare
		public RuleCall getRightCmdLECompareParserRuleCall_1_1_0() { return cRightCmdLECompareParserRuleCall_1_1_0; }
	}
	public class CmdLECompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.CmdLECompare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCmdGCompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCmdLECompareLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_0_2 = (Keyword)cGroup_1_0_0.eContents().get(2);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCmdGCompareParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CmdLECompare GExpression:
		//	CmdGCompare (=> ({CmdLECompare.left=current} '<' '=') right=CmdGCompare)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CmdGCompare (=> ({CmdLECompare.left=current} '<' '=') right=CmdGCompare)*
		public Group getGroup() { return cGroup; }
		
		//CmdGCompare
		public RuleCall getCmdGCompareParserRuleCall_0() { return cCmdGCompareParserRuleCall_0; }
		
		//(=> ({CmdLECompare.left=current} '<' '=') right=CmdGCompare)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({CmdLECompare.left=current} '<' '=')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{CmdLECompare.left=current} '<' '='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{CmdLECompare.left=current}
		public Action getCmdLECompareLeftAction_1_0_0_0() { return cCmdLECompareLeftAction_1_0_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_0_1() { return cLessThanSignKeyword_1_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_0_2() { return cEqualsSignKeyword_1_0_0_2; }
		
		//right=CmdGCompare
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//CmdGCompare
		public RuleCall getRightCmdGCompareParserRuleCall_1_1_0() { return cRightCmdGCompareParserRuleCall_1_1_0; }
	}
	public class CmdGCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.CmdGCompare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCmdLCompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCmdGCompareLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCmdLCompareParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CmdGCompare GExpression:
		//	CmdLCompare (=> ({CmdGCompare.left=current} '>') right=CmdLCompare)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CmdLCompare (=> ({CmdGCompare.left=current} '>') right=CmdLCompare)*
		public Group getGroup() { return cGroup; }
		
		//CmdLCompare
		public RuleCall getCmdLCompareParserRuleCall_0() { return cCmdLCompareParserRuleCall_0; }
		
		//(=> ({CmdGCompare.left=current} '>') right=CmdLCompare)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({CmdGCompare.left=current} '>')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{CmdGCompare.left=current} '>'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{CmdGCompare.left=current}
		public Action getCmdGCompareLeftAction_1_0_0_0() { return cCmdGCompareLeftAction_1_0_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_0_1() { return cGreaterThanSignKeyword_1_0_0_1; }
		
		//right=CmdLCompare
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//CmdLCompare
		public RuleCall getRightCmdLCompareParserRuleCall_1_1_0() { return cRightCmdLCompareParserRuleCall_1_1_0; }
	}
	public class CmdLCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.CmdLCompare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCmdAddParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCmdLCompareLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCmdAddParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CmdLCompare GExpression:
		//	CmdAdd (=> ({CmdLCompare.left=current} '<') right=CmdAdd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CmdAdd (=> ({CmdLCompare.left=current} '<') right=CmdAdd)*
		public Group getGroup() { return cGroup; }
		
		//CmdAdd
		public RuleCall getCmdAddParserRuleCall_0() { return cCmdAddParserRuleCall_0; }
		
		//(=> ({CmdLCompare.left=current} '<') right=CmdAdd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({CmdLCompare.left=current} '<')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{CmdLCompare.left=current} '<'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{CmdLCompare.left=current}
		public Action getCmdLCompareLeftAction_1_0_0_0() { return cCmdLCompareLeftAction_1_0_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_0_1() { return cLessThanSignKeyword_1_0_0_1; }
		
		//right=CmdAdd
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//CmdAdd
		public RuleCall getRightCmdAddParserRuleCall_1_1_0() { return cRightCmdAddParserRuleCall_1_1_0; }
	}
	public class CmdAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.CmdAdd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCmdSubParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCmdAddLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCmdSubParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CmdAdd GExpression:
		//	CmdSub (=> ({CmdAdd.left=current} '+') right=CmdSub)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CmdSub (=> ({CmdAdd.left=current} '+') right=CmdSub)*
		public Group getGroup() { return cGroup; }
		
		//CmdSub
		public RuleCall getCmdSubParserRuleCall_0() { return cCmdSubParserRuleCall_0; }
		
		//(=> ({CmdAdd.left=current} '+') right=CmdSub)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({CmdAdd.left=current} '+')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{CmdAdd.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{CmdAdd.left=current}
		public Action getCmdAddLeftAction_1_0_0_0() { return cCmdAddLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//right=CmdSub
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//CmdSub
		public RuleCall getRightCmdSubParserRuleCall_1_1_0() { return cRightCmdSubParserRuleCall_1_1_0; }
	}
	public class CmdSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.CmdSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCmdNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCmdSubLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCmdNotParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CmdSub GExpression:
		//	CmdNot (=> ({CmdSub.left=current} '-') right=CmdNot)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CmdNot (=> ({CmdSub.left=current} '-') right=CmdNot)*
		public Group getGroup() { return cGroup; }
		
		//CmdNot
		public RuleCall getCmdNotParserRuleCall_0() { return cCmdNotParserRuleCall_0; }
		
		//(=> ({CmdSub.left=current} '-') right=CmdNot)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({CmdSub.left=current} '-')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{CmdSub.left=current} '-'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{CmdSub.left=current}
		public Action getCmdSubLeftAction_1_0_0_0() { return cCmdSubLeftAction_1_0_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0_1() { return cHyphenMinusKeyword_1_0_0_1; }
		
		//right=CmdNot
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//CmdNot
		public RuleCall getRightCmdNotParserRuleCall_1_1_0() { return cRightCmdNotParserRuleCall_1_1_0; }
	}
	public class CmdNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.CmdNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionCmdLitParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final RuleCall cCmdLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CmdNot GExpression:
		//	'!' expression=CmdLit | CmdLit;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' expression=CmdLit | CmdLit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'!' expression=CmdLit
		public Group getGroup_0() { return cGroup_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }
		
		//expression=CmdLit
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//CmdLit
		public RuleCall getExpressionCmdLitParserRuleCall_0_1_0() { return cExpressionCmdLitParserRuleCall_0_1_0; }
		
		//CmdLit
		public RuleCall getCmdLitParserRuleCall_1() { return cCmdLitParserRuleCall_1; }
	}
	public class CmdLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.CmdLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntLitCmdAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cGBoolTrueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTrueKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cGBoolFalseAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFalseKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringLitAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cVariableAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cPortLitAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cInSideAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final Keyword cInSideInSideKeyword_5_1_0_0 = (Keyword)cInSideAssignment_5_1_0.eContents().get(0);
		private final Keyword cOutSideKeyword_5_1_1 = (Keyword)cAlternatives_5_1.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cCmdExprParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//CmdLit GExpression:
		//	{IntLitCmd} value=INT | {GBoolTrue} 'true' | {GBoolFalse} 'false' | {StringLit} value=STRING | {Variable} value=ID |
		//	{PortLit} (inSide?='inSide' | 'outSide') | '(' CmdExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntLitCmd} value=INT | {GBoolTrue} 'true' | {GBoolFalse} 'false' | {StringLit} value=STRING | {Variable} value=ID |
		//{PortLit} (inSide?='inSide' | 'outSide') | '(' CmdExpr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntLitCmd} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntLitCmd}
		public Action getIntLitCmdAction_0_0() { return cIntLitCmdAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{GBoolTrue} 'true'
		public Group getGroup_1() { return cGroup_1; }
		
		//{GBoolTrue}
		public Action getGBoolTrueAction_1_0() { return cGBoolTrueAction_1_0; }
		
		//'true'
		public Keyword getTrueKeyword_1_1() { return cTrueKeyword_1_1; }
		
		//{GBoolFalse} 'false'
		public Group getGroup_2() { return cGroup_2; }
		
		//{GBoolFalse}
		public Action getGBoolFalseAction_2_0() { return cGBoolFalseAction_2_0; }
		
		//'false'
		public Keyword getFalseKeyword_2_1() { return cFalseKeyword_2_1; }
		
		//{StringLit} value=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{StringLit}
		public Action getStringLitAction_3_0() { return cStringLitAction_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
		
		//{Variable} value=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//{Variable}
		public Action getVariableAction_4_0() { return cVariableAction_4_0; }
		
		//value=ID
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_4_1_0() { return cValueIDTerminalRuleCall_4_1_0; }
		
		//{PortLit} (inSide?='inSide' | 'outSide')
		public Group getGroup_5() { return cGroup_5; }
		
		//{PortLit}
		public Action getPortLitAction_5_0() { return cPortLitAction_5_0; }
		
		//inSide?='inSide' | 'outSide'
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//inSide?='inSide'
		public Assignment getInSideAssignment_5_1_0() { return cInSideAssignment_5_1_0; }
		
		//'inSide'
		public Keyword getInSideInSideKeyword_5_1_0_0() { return cInSideInSideKeyword_5_1_0_0; }
		
		//'outSide'
		public Keyword getOutSideKeyword_5_1_1() { return cOutSideKeyword_5_1_1; }
		
		//'(' CmdExpr ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//CmdExpr
		public RuleCall getCmdExprParserRuleCall_6_1() { return cCmdExprParserRuleCall_6_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueGExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Field:
		//	name=ID '->' value=GExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '->' value=GExpression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//value=GExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//GExpression
		public RuleCall getValueGExpressionParserRuleCall_2_0() { return cValueGExpressionParserRuleCall_2_0; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInPortAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cInSideKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutPortAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOutSideKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Port GExpression:
		//	{InPort} "inSide" | {OutPort} "outSide";
		@Override public ParserRule getRule() { return rule; }
		
		//{InPort} "inSide" | {OutPort} "outSide"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{InPort} "inSide"
		public Group getGroup_0() { return cGroup_0; }
		
		//{InPort}
		public Action getInPortAction_0_0() { return cInPortAction_0_0; }
		
		//"inSide"
		public Keyword getInSideKeyword_0_1() { return cInSideKeyword_0_1; }
		
		//{OutPort} "outSide"
		public Group getGroup_1() { return cGroup_1; }
		
		//{OutPort}
		public Action getOutPortAction_1_0() { return cOutPortAction_1_0; }
		
		//"outSide"
		public Keyword getOutSideKeyword_1_1() { return cOutSideKeyword_1_1; }
	}
	public class AutomataDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.AutomataDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAUTOMATAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInitKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cInitStateCrossReference_4_0 = (CrossReference)cInitAssignment_4.eContents().get(0);
		private final RuleCall cInitStateIDTerminalRuleCall_4_0_1 = (RuleCall)cInitStateCrossReference_4_0.eContents().get(1);
		private final Assignment cStatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesStateParserRuleCall_5_0 = (RuleCall)cStatesAssignment_5.eContents().get(0);
		
		//AutomataDef:
		//	"AUTOMATA" name=ID "init" "=" init=[State] states+=State*;
		@Override public ParserRule getRule() { return rule; }
		
		//"AUTOMATA" name=ID "init" "=" init=[State] states+=State*
		public Group getGroup() { return cGroup; }
		
		//"AUTOMATA"
		public Keyword getAUTOMATAKeyword_0() { return cAUTOMATAKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"init"
		public Keyword getInitKeyword_2() { return cInitKeyword_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//init=[State]
		public Assignment getInitAssignment_4() { return cInitAssignment_4; }
		
		//[State]
		public CrossReference getInitStateCrossReference_4_0() { return cInitStateCrossReference_4_0; }
		
		//ID
		public RuleCall getInitStateIDTerminalRuleCall_4_0_1() { return cInitStateIDTerminalRuleCall_4_0_1; }
		
		//states+=State*
		public Assignment getStatesAssignment_5() { return cStatesAssignment_5; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_5_0() { return cStatesStateParserRuleCall_5_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTransitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_1_0 = (RuleCall)cTransitionsAssignment_1.eContents().get(0);
		
		//State:
		//	name=ID transitions+=Transition*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID transitions+=Transition*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//transitions+=Transition*
		public Assignment getTransitionsAssignment_1() { return cTransitionsAssignment_1; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_1_0() { return cTransitionsTransitionParserRuleCall_1_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.gpfl.Gpfl.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventIDTerminalRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStateCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetStateCrossReference_3_0.eContents().get(1);
		
		//Transition: // automata events are primitives of the language
		//	'-' event=ID '->' target=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//// automata events are primitives of the language
		//'-' event=ID '->' target=[State]
		public Group getGroup() { return cGroup; }
		
		//// automata events are primitives of the language
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//event=ID
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//ID
		public RuleCall getEventIDTerminalRuleCall_1_0() { return cEventIDTerminalRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//target=[State]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[State]
		public CrossReference getTargetStateCrossReference_3_0() { return cTargetStateCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_3_0_1() { return cTargetStateIDTerminalRuleCall_3_0_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final GExpressionElements pGExpression;
	private final CmdElements pCmd;
	private final CmdExprElements pCmdExpr;
	private final CmdOrElements pCmdOr;
	private final CmdAndElements pCmdAnd;
	private final CmdEqElements pCmdEq;
	private final CmdNeqElements pCmdNeq;
	private final CmdGECompareElements pCmdGECompare;
	private final CmdLECompareElements pCmdLECompare;
	private final CmdGCompareElements pCmdGCompare;
	private final CmdLCompareElements pCmdLCompare;
	private final CmdAddElements pCmdAdd;
	private final CmdSubElements pCmdSub;
	private final CmdNotElements pCmdNot;
	private final CmdLitElements pCmdLit;
	private final FieldElements pField;
	private final PortElements pPort;
	private final AutomataDefElements pAutomataDef;
	private final StateElements pState;
	private final TransitionElements pTransition;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GpflGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pGExpression = new GExpressionElements();
		this.pCmd = new CmdElements();
		this.pCmdExpr = new CmdExprElements();
		this.pCmdOr = new CmdOrElements();
		this.pCmdAnd = new CmdAndElements();
		this.pCmdEq = new CmdEqElements();
		this.pCmdNeq = new CmdNeqElements();
		this.pCmdGECompare = new CmdGECompareElements();
		this.pCmdLECompare = new CmdLECompareElements();
		this.pCmdGCompare = new CmdGCompareElements();
		this.pCmdLCompare = new CmdLCompareElements();
		this.pCmdAdd = new CmdAddElements();
		this.pCmdSub = new CmdSubElements();
		this.pCmdNot = new CmdNotElements();
		this.pCmdLit = new CmdLitElements();
		this.pField = new FieldElements();
		this.pPort = new PortElements();
		this.pAutomataDef = new AutomataDefElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.mleduc.gpfl.Gpfl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
	//Program:
	//	{Program}
	//	'package' name=ID
	//	"PROLOGUE" ("AUTOMATAS" automatas+=AutomataDef*)? ("INIT" initStmts+=GExpression*)?
	//	"FILTER"
	//	stmts+=GExpression*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//GExpression:
	//	Cmd | {CondStmt} "cond" "(" exp=GExpression "," stmts+=GExpression* ")" | {IterStmt} "iter" "(" exp=GExpression ","
	//	stmts+=GExpression* ")" | {InterruptStmt} "newInterrupt" "(" timeout=INT "," periodic=GExpression ","
	//	stmts+=GExpression* ")";
	public GExpressionElements getGExpressionAccess() {
		return pGExpression;
	}
	
	public ParserRule getGExpressionRule() {
		return getGExpressionAccess().getRule();
	}
	
	//Cmd GExpression:
	//	{NopCmd} "nop" | {AcceptCmd} "accept" | {DropCmd} "drop" | {SendCmd} "send" "(" port=Port "," fields+=Field* ")" |
	//	{AlarmCmd} "alarm" "(" exp=GExpression ")" | {SetCmd} "set" "(" name=ID "," exp=CmdExpr ")" | {AutomatonCmd}
	//	"newAutomaton" "(" name=ID "," automaton=[AutomataDef] ")" | {StpCmd} "step" "(" automaton=[AutomatonCmd] ","
	//	event=GExpression "," errors+=GExpression* ")" | CmdExpr;
	public CmdElements getCmdAccess() {
		return pCmd;
	}
	
	public ParserRule getCmdRule() {
		return getCmdAccess().getRule();
	}
	
	//CmdExpr GExpression:
	//	CmdOr;
	public CmdExprElements getCmdExprAccess() {
		return pCmdExpr;
	}
	
	public ParserRule getCmdExprRule() {
		return getCmdExprAccess().getRule();
	}
	
	//CmdOr GExpression:
	//	CmdAnd (=> ({CmdAnd.left=current} '||') right=CmdAnd)*;
	public CmdOrElements getCmdOrAccess() {
		return pCmdOr;
	}
	
	public ParserRule getCmdOrRule() {
		return getCmdOrAccess().getRule();
	}
	
	//CmdAnd GExpression:
	//	CmdEq (=> ({CmdAnd.left=current} '&&') right=CmdEq)*;
	public CmdAndElements getCmdAndAccess() {
		return pCmdAnd;
	}
	
	public ParserRule getCmdAndRule() {
		return getCmdAndAccess().getRule();
	}
	
	//CmdEq GExpression:
	//	CmdNeq (=> ({CmdEq.left=current} '==') right=CmdNeq)*;
	public CmdEqElements getCmdEqAccess() {
		return pCmdEq;
	}
	
	public ParserRule getCmdEqRule() {
		return getCmdEqAccess().getRule();
	}
	
	//CmdNeq GExpression:
	//	CmdGECompare (=> ({CmdNEq.left=current} '!=') right=CmdGECompare)*;
	public CmdNeqElements getCmdNeqAccess() {
		return pCmdNeq;
	}
	
	public ParserRule getCmdNeqRule() {
		return getCmdNeqAccess().getRule();
	}
	
	//CmdGECompare GExpression:
	//	CmdLECompare (=> ({CmdGECompare.left=current} '>=') right=CmdLECompare)*;
	public CmdGECompareElements getCmdGECompareAccess() {
		return pCmdGECompare;
	}
	
	public ParserRule getCmdGECompareRule() {
		return getCmdGECompareAccess().getRule();
	}
	
	//CmdLECompare GExpression:
	//	CmdGCompare (=> ({CmdLECompare.left=current} '<' '=') right=CmdGCompare)*;
	public CmdLECompareElements getCmdLECompareAccess() {
		return pCmdLECompare;
	}
	
	public ParserRule getCmdLECompareRule() {
		return getCmdLECompareAccess().getRule();
	}
	
	//CmdGCompare GExpression:
	//	CmdLCompare (=> ({CmdGCompare.left=current} '>') right=CmdLCompare)*;
	public CmdGCompareElements getCmdGCompareAccess() {
		return pCmdGCompare;
	}
	
	public ParserRule getCmdGCompareRule() {
		return getCmdGCompareAccess().getRule();
	}
	
	//CmdLCompare GExpression:
	//	CmdAdd (=> ({CmdLCompare.left=current} '<') right=CmdAdd)*;
	public CmdLCompareElements getCmdLCompareAccess() {
		return pCmdLCompare;
	}
	
	public ParserRule getCmdLCompareRule() {
		return getCmdLCompareAccess().getRule();
	}
	
	//CmdAdd GExpression:
	//	CmdSub (=> ({CmdAdd.left=current} '+') right=CmdSub)*;
	public CmdAddElements getCmdAddAccess() {
		return pCmdAdd;
	}
	
	public ParserRule getCmdAddRule() {
		return getCmdAddAccess().getRule();
	}
	
	//CmdSub GExpression:
	//	CmdNot (=> ({CmdSub.left=current} '-') right=CmdNot)*;
	public CmdSubElements getCmdSubAccess() {
		return pCmdSub;
	}
	
	public ParserRule getCmdSubRule() {
		return getCmdSubAccess().getRule();
	}
	
	//CmdNot GExpression:
	//	'!' expression=CmdLit | CmdLit;
	public CmdNotElements getCmdNotAccess() {
		return pCmdNot;
	}
	
	public ParserRule getCmdNotRule() {
		return getCmdNotAccess().getRule();
	}
	
	//CmdLit GExpression:
	//	{IntLitCmd} value=INT | {GBoolTrue} 'true' | {GBoolFalse} 'false' | {StringLit} value=STRING | {Variable} value=ID |
	//	{PortLit} (inSide?='inSide' | 'outSide') | '(' CmdExpr ')';
	public CmdLitElements getCmdLitAccess() {
		return pCmdLit;
	}
	
	public ParserRule getCmdLitRule() {
		return getCmdLitAccess().getRule();
	}
	
	//Field:
	//	name=ID '->' value=GExpression;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Port GExpression:
	//	{InPort} "inSide" | {OutPort} "outSide";
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//AutomataDef:
	//	"AUTOMATA" name=ID "init" "=" init=[State] states+=State*;
	public AutomataDefElements getAutomataDefAccess() {
		return pAutomataDef;
	}
	
	public ParserRule getAutomataDefRule() {
		return getAutomataDefAccess().getRule();
	}
	
	//State:
	//	name=ID transitions+=Transition*;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition: // automata events are primitives of the language
	//	'-' event=ID '->' target=[State];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
