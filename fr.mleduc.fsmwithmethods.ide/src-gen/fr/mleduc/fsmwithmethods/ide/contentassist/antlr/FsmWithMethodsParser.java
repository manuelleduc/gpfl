/*
 * generated by Xtext 2.12.0
 */
package fr.mleduc.fsmwithmethods.ide.contentassist.antlr;

import com.google.inject.Inject;
import fr.mleduc.fsmwithmethods.ide.contentassist.antlr.internal.InternalFsmWithMethodsParser;
import fr.mleduc.fsmwithmethods.services.FsmWithMethodsGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class FsmWithMethodsParser extends AbstractContentAssistParser {

	@Inject
	private FsmWithMethodsGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalFsmWithMethodsParser createParser() {
		InternalFsmWithMethodsParser result = new InternalFsmWithMethodsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFExpressionAccess().getAlternatives(), "rule__FExpression__Alternatives");
					put(grammarAccess.getReferentiableAccess().getAlternatives(), "rule__Referentiable__Alternatives");
					put(grammarAccess.getFsmAccess().getGroup(), "rule__Fsm__Group__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_4(), "rule__Method__Group_4__0");
					put(grammarAccess.getMethodAccess().getGroup_4_1(), "rule__Method__Group_4_1__0");
					put(grammarAccess.getMethodCallAccess().getGroup(), "rule__MethodCall__Group__0");
					put(grammarAccess.getMethodCallAccess().getGroup_4(), "rule__MethodCall__Group_4__0");
					put(grammarAccess.getMethodCallAccess().getGroup_4_1(), "rule__MethodCall__Group_4_1__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getFsmAccess().getNameAssignment_2(), "rule__Fsm__NameAssignment_2");
					put(grammarAccess.getFsmAccess().getStateAssignment_5(), "rule__Fsm__StateAssignment_5");
					put(grammarAccess.getFsmAccess().getExpressionsAssignment_6(), "rule__Fsm__ExpressionsAssignment_6");
					put(grammarAccess.getMethodAccess().getNameAssignment_2(), "rule__Method__NameAssignment_2");
					put(grammarAccess.getMethodAccess().getParamsAssignment_4_0(), "rule__Method__ParamsAssignment_4_0");
					put(grammarAccess.getMethodAccess().getParamsAssignment_4_1_1(), "rule__Method__ParamsAssignment_4_1_1");
					put(grammarAccess.getMethodAccess().getExpressionsAssignment_7(), "rule__Method__ExpressionsAssignment_7");
					put(grammarAccess.getParamAccess().getNameAssignment(), "rule__Param__NameAssignment");
					put(grammarAccess.getMethodCallAccess().getMethodAssignment_2(), "rule__MethodCall__MethodAssignment_2");
					put(grammarAccess.getMethodCallAccess().getParamsAssignment_4_0(), "rule__MethodCall__ParamsAssignment_4_0");
					put(grammarAccess.getMethodCallAccess().getParamsAssignment_4_1_1(), "rule__MethodCall__ParamsAssignment_4_1_1");
					put(grammarAccess.getStateAccess().getNameAssignment_2(), "rule__State__NameAssignment_2");
					put(grammarAccess.getTransitionAccess().getEventAssignment_2(), "rule__Transition__EventAssignment_2");
					put(grammarAccess.getTransitionAccess().getFromAssignment_4(), "rule__Transition__FromAssignment_4");
					put(grammarAccess.getTransitionAccess().getToAssignment_6(), "rule__Transition__ToAssignment_6");
					put(grammarAccess.getEventAccess().getNameAssignment_2(), "rule__Event__NameAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FsmWithMethodsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FsmWithMethodsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
